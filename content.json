{"pages":[],"posts":[{"title":"饅頭計畫 #0 學員心得 (1) Moojing","text":"第零屆的學員只有一個人，這位同學寫了系列文章文章記錄了學習軌跡。 前端工程師後端之旅(1) — 原來30天可以走這麼遠. 一個月可以做很多事：可以讀一本書、可以出國旅遊、可以養成一個你想要的好習慣，我用… | by Moojing | Medium前端工程師後端之旅(2) — 從畫面拆解，到整理User Story前端工程師後端之旅(3) — 路由設計以及Slug SEO優化前端工程師後端之旅(4) — 前端體驗優化前端工程師後端之旅(5) — 資料庫關係設計前端工程師後端之旅(6) — 利用爬蟲取得網站原始商品資料前端工程師後端之旅(7) — 直上穹頂的最後一哩路：部署[Javascript] 製作 Base on Cookie 的購物車[Javascript] 初探Regex 正規表達式[javasrcipt] Summernote 所見即所得編輯器達成圖片上傳","link":"/2019/02/06/mc0-01-moojing/"},{"title":"饅頭計畫 #1 學員心得 (2) GK","text":"Q: 怎麼稱呼？A: GK Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: 是，我成為了一個混水摸魚的工程師 Q: 你目前的職業是？A: 前端工程師 Q: 你覺得饅頭計畫對你有幫助嘛？A: 非常有幫助，讚！ Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A: 不好意思說自己是人人稱羨的工程師，只好自稱混水摸魚，但其實還是稍微認真的在工作著，也逐漸朝系統分析的領域、後端領域與資料庫的領域學習。我覺得最大的好處就是有人督促學習，監督進度，不然自己真的很容易懶散。感謝 Luka！ Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 逼迫的部分 Q: 有沒有你很想學，但是沒有學到的東西？A: 沒有特別想學什麼，都是順著路走 Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: 我願意！但我需要一點時間 Q: 有沒有什麼話想對 Luka 說？A: 我寫了一篇轉職心得，其中有提到一點點饅頭計畫https://gkfat.github.io/gk-blog/2019/10/15/road-to-front-end Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 有興趣","link":"/2020/09/06/mc1-02-gk/"},{"title":"饅頭計畫 #1 學員心得 (1) Joanne","text":"Q: 怎麼稱呼？A: Joanne Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: 是，我成為了一個混水摸魚的工程師 Q: 你目前的職業是？A: 全端，但專案框架都雷同 Q: 你覺得饅頭計畫對你有幫助嘛？A: 有幫助，掌聲鼓勵鼓勵 Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A: 還記得加入饅頭計畫沒多久，同時也在準備實習面試(目前已畢業轉正)，當時的我coding能力其實並不好，許多基本觀念、技術也都很不熟悉，所以對於即將開始實習這件事，感到非常緊張和擔心，擔心自己能力不足也擔心自己沒辦法好好表現，所以也曾經請教過Luka，該如何提升自己的能力呢 ? 甚至到底該如何學習「物件導向」? 而請教完也相對比較有概念，知道如果要把「物件導向」的相關書籍從頭啃到尾，實在有點痛苦，做中學才能真正理解何謂物件導向。而其實也相當感謝Luka願意無私的分享自己的技術，講解了許多基本觀念和分享開發過程中會接觸到的工具，你的課程很棒~真的有幫助到我~~~ XD 即使在後期因為工作繁忙比較少參與課程，但還是非常謝謝Luka ʕ•ᴥ•ʔ Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 覺得Luka做事很積極哈哈哈，非常的棒啊啊啊啊，當我準備怠惰時，看到Luka下班後還開直播教學，立馬從沙發跳起 (沒資格軟爛)。hahaha Q: 有沒有你很想學，但是沒有學到的東西？A: 資料庫正規化設計及資料庫效能優化 很需要加強… AWS (工作上有接觸到一些，已購入課程，目標今年考到證照!!!) Ruby、Ruby On Rails 網路架構這塊…超弱 QQ 什麼封包什麼router switch，因為我是IT部門，這塊早晚還是必須學起來 強大的邏輯，有了清晰又強大的邏輯力，遇到問題就可以馬上知道問題點及解決方法 (:::з」∠) Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: 我願意！但我需要一點時間 Q: 有沒有什麼話想對 Luka 說？A: 非常期待饅頭計畫第二彈 ! Luka加油~! Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 有興趣","link":"/2020/09/06/mc1-01-joanne/"},{"title":"饅頭計畫 #1 學員心得 (3) Genie","text":"Q: 怎麼稱呼？A: Genie Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: \b否，我沒有變轉職成功 Q: 你目前的職業是？A: 還在學習中，目標今年轉職成功 Q: 你覺得饅頭計畫對你有幫助嘛？A: 還好，so so Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A: 暫無。 不過主要是我自己的原因啦，的確沒有花太多的時間與精力在饅頭計畫上，也沒有與 Luka 保持聯繫，討論學習中所遇到的狀況與進度。 如果有機會再參加一次的話，應該會嘗試有沒有其他作法，把時間管理以及與進度追蹤做好，以這樣的狀態來參加饅頭計畫應該比較有意義 Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 沒有將每支影片都看完，不過Luka的教學架構做的很具體，所以透過影片的標題的關鍵字，可以知道要成為網站工程師需要了解以及學習的技能有哪些;然後就是 Luka 是個很願意分享的人，剛開始有 slack 私訊以及發 PR 說明自己目前的學習狀況，Luka 會認真地分析以及指出要怎麼加強，在自學的路上有個有經驗的人可以指引方向很重要 Q: 有沒有你很想學，但是沒有學到的東西？A: 想知道後端方面所需要學習的知識與技能，以及如何與前端配合 Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: 我願意！但我需要一點時間 Q: 有沒有什麼話想對 Luka 說？A: 參與 Luka 饅頭計畫後，覺得 Luka 是個用很用心的態度在做事的 mentor，這個計劃的發心以及構想很不錯，而且真的有人透過饅頭計畫轉職成功，其實蠻替這些人感到高興的，另一方面透過這次的經驗，發現自己在學習上屬於較被動型的，有些學習的策略是需要調整的，教練，我好想變強啊。 Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 有興趣","link":"/2020/09/06/mc1-03-genie/"},{"title":"饅頭計畫 #1 學員心得 (4) TsungYu","text":"Q: 怎麼稱呼？A: 宗裕 Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: 是，我成為了一個混水摸魚的工程師 Q: 你目前的職業是？A: 偏向雲端工程師 Q: 你覺得饅頭計畫對你有幫助嘛？A: 有幫助，掌聲鼓勵鼓勵 Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可 A: 我覺得這個計畫對我最大的影響是讓我在學習的過程中，學會自己去找問題解答，有幾次因為 Mentor 的提點，才有辦法找出解法。過程雖然挫折，但我相信這是成為一位 Engineer 必須具備的能力，畢竟很多時候，不可能會有人手把手帶著自己(別人也沒有義務)。 另外覺得很不錯的地方在於 Mentor 鼓勵學員將自己的學習記錄成文章，在撰寫的過程中，其實也是在檢視自己對於該技術的認知程度到多少。而更多時候是，記錄下來的東西是幫助到未來的自己！經常在 Coding 時會回過頭來看筆記，每次看著看著，就會想哪裏沒寫好，或是還有哪些可以補充，我想這也是一種成長。 Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: Luka 的引導方式有別於一般Mentor，遇到問題的時候，不會急著給答案，而是給解決問題的方向，要學員嘗試自己去找解法，讓學員養成試著自己除錯的習慣。 Q: 有沒有你很想學，但是沒有學到的東西？A: 後端工程師的一些必備知識，e.g. 網路、資料庫、資安等等 Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: 我願意！但我需要一點時間 Q: 有沒有什麼話想對 Luka 說？A: 謝謝 Luka! 若不是饅頭計畫，我可能沒辦法即時修正自己的學習方法，從發散式的學習到收斂至主要目標，切分成一個個的學習步驟。 Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 我才不要勒","link":"/2020/09/06/mc1-04-tsung-yu/"},{"title":"饅頭計畫 #1 學員心得 (6) Shirley","text":"Q: 怎麼稱呼？A: shirley Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: \b否，我沒有變轉職成功 Q: 你目前的職業是？A: UI設計師，會接觸到一些切版 Q: 你覺得饅頭計畫對你有幫助嘛？A: 有幫助，掌聲鼓勵鼓勵 Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A: 因課程教學不到一半，自己先去找到工作了 Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 暸解到前端，基本學習 Q: 有沒有你很想學，但是沒有學到的東西？A: 目前沒有 Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？\bA: 抱歉，這題我 pass Q: 有沒有什麼話想對 Luka 說？A: 謝謝你，給我們學習的機會，讓我們收穫很多。辛苦你，準備很多題材～ 你題材很棒 Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 我才不要勒","link":"/2020/09/06/mc1-06-shirley/"},{"title":"饅頭計畫 #1 學員心得 (7) Theo","text":"Q: 怎麼稱呼？A: Theo Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: 是，我成為了一個混水摸魚的工程師 Q: 你目前的職業是？A: backend Q: 你覺得饅頭計畫對你有幫助嘛？A: 有幫助，掌聲鼓勵鼓勵 Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A:老實說，我大多是請教Luka 關於履歷問題、面試問題應對，還有工作狀況、職涯問題XD，尤其是找工作時期有 Luka指點履歷和面試問題，糾正許多自己沒有注意到的缺點，還有比較不容易迷失求職方向，最後是剛入職時期，由於公司沒有前輩可以讓我詢問，所以都是透過 Luka 的熱心答覆，慢慢釐清自己在工作上的定位，以及職場上的心境轉換 Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 熱心答覆問題，雖然偶爾話題不斷加開 Q: 有沒有你很想學，但是沒有學到的東西？A: 系統分析的流程和技巧 Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: 我願意！但我沒有時間 Q: 有沒有什麼話想對 Luka 說？A: 我是 Starbugs 忠實讀者，luka 分享的文章都有乖乖看 Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 有興趣","link":"/2020/09/06/mc1-07-theo/"},{"title":"饅頭計畫 #1 學員心得 (5) Leah","text":"Q: 怎麼稱呼？A: Leah Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: 是，我成為了一個混水摸魚的工程師 Q: 你目前的職業是？A: 前端 Q: 你覺得饅頭計畫對你有幫助嘛？A: 非常有幫助，讚！ Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A:初期找工作時明確知道準備方向，也因為有Luka開Asana的票，隨時盯自己的進度，比較不會自己一個人準備就沒自信、鬆懈。之後跟其他學院加入群組，還有一次實體分享會，在裡面看到其他人的分享，也督促自己成為工程師之後還是要持續進修 Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 願意分享經驗，提供明確的建議，很大方提供Udemy讓我當免費仔XD Q: 有沒有你很想學，但是沒有學到的東西？A: Docket k8s 這些新潮的雲端部署的概念 Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: 我願意！而且我已經寫好了 Q: 有沒有什麼話想對 Luka 說？A: 在年初的激勵之下，拖了半年，我終於勇敢換工作了！換到一家比較有成長性的公司，不過是還沒滿試用期的菜雞 Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 有興趣","link":"/2020/09/06/mc1-05-leah/"},{"title":"饅頭計畫 #1 學員心得 (8) Windy","text":"Q: 怎麼稱呼？A: windy Q: 你在參加饅頭計畫前是否已經是工程師？A: 是，我是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: 是，我成為了一個混水摸魚的工程師 Q: 你目前的職業是？A: 前端 Q: 你覺得饅頭計畫對你有幫助嘛？A: 有幫助，掌聲鼓勵鼓勵 Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A: 觀念上有幫助 Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 教學的方法 是適合我的 Q: 有沒有你很想學，但是沒有學到的東西？A: 目前的觀念還是很弱 我應該還是會主要在繼續把觀念搞好 Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: \b抱歉，這題我 pass Q: 有沒有什麼話想對 Luka 說？A: 謝謝你願意花時間， 幫助想轉職或者觀念不好的人 Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 我才不要勒","link":"/2020/09/06/mc1-08-windy/"},{"title":"饅頭計畫 #1 學員心得 (10) 昱穎","text":"Q: 怎麼稱呼？A: 昱穎 Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: \b否，我沒有變轉職成功 Q: 你目前的職業是？A: 都不是，在學前端 Q: 你覺得饅頭計畫對你有幫助嘛？A: 有幫助，掌聲鼓勵鼓勵 Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A: 我應該不算有參加到饅頭計畫XD，但我有認真看完yt的影片。yt影片錄得很生動，也重新學到很多。 Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 願意很友善的這樣對陌生人XD，還有另一點是影片是從網路的教學資源去講解，讓人有資料可以跟著看，不是那種開一個畫面就開始介紹打code那種教學影片 Q: 有沒有你很想學，但是沒有學到的東西？A: 什麼都想 Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: 我願意！但我需要一點時間 Q: 有沒有什麼話想對 Luka 說？A: 哈哈，我前幾天有跟你打招呼，不過感覺你很忙就沒打擾你了！總之很謝謝你願意跟陌生人說說話還有鼓勵，我還是會繼續學寫程式的ＸＤ。對於上面的問題我應該是還沒辦法當助教，但我想繼續參與。總之很謝謝你～！ Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 有興趣","link":"/2020/09/06/mc1-10-yu-ying/"},{"title":"饅頭計畫 #1 學員心得 (9) Phoenix","text":"Q: 怎麼稱呼？A: Phoenix Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: 是，我成為了一個混水摸魚的工程師 Q: 你目前的職業是？A: 後端，前端碰的較少 Q: 你覺得饅頭計畫對你有幫助嘛？A: 非常有幫助，讚！ Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A: 我找到工作了 雖然我是離開工程師一年後再踏上工程師的路，當時的確忘了很多基本觀念，加上前一份工程師的工作使用較舊的技術，經過這次饅頭計畫，創照這樣的環境，跟著大家一起努力，一起成長。 過程中除了技術的成長外，也會在過程中給予我們工程師該有的知識與養成的一些習慣 Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 耐心教學，很願意教我們這點已經夠讓人敬佩了 Q: 有沒有你很想學，但是沒有學到的東西？A: 其實前後端知識都蠻有興趣的，想要一條往 senior 路上必備的知識想把前端弄好一個框架，react 或 vue 都好後端太博大精深了，有點不知道從何學起，或只能遇到問題在去學習了 Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: 我願意！但我需要一點時間 Q: 有沒有什麼話想對 Luka 說？A: 很謝謝你在我當時迷茫低潮害怕的時候給予勇氣，勇敢踏出那一步不知道之後會不會有前進senior之路的教學 Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 有興趣","link":"/2020/09/06/mc1-09-phoenix/"},{"title":"饅頭計畫 #1 學員心得 (11) Trista","text":"Q: 怎麼稱呼？A: 唯 Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: 是，我成為了一個混水摸魚的工程師 Q: 你目前的職業是？A: 前端 Q: 你覺得饅頭計畫對你有幫助嘛？A: 有幫助，掌聲鼓勵鼓勵 Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A: 我目前找到一份薪水還可以的工作，月薪四萬，重點是，我終於可以不再只是設計師，而是能透過ＪＳ控制元件的人了＾Ｏ＾（超開心）饅頭計畫中我覺得收穫最大的是自信吧，每次聚會聽跟看大家不同的想法，還有自我檢討（雖然為了賺錢沒很積極讀書），但是至少我得到了許多啟發。 Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 資源，看到了很多人分享的想法，對我來說就是最大的資源。而 Luka 也給了我許多不同的觀點，這也影響到我現在對小孩學習上的投資（是個媽媽）。 Q: 有沒有你很想學，但是沒有學到的東西？A: 串接ＡＰＩ跟資料庫之類的（其實我現在做的工作就是串ＪＳＯＮ跟寫動態資料，但我不知道這叫不叫ＡＰＩ），或是前端框架大綱（發現好多公司都要會用框架的人，我目前的工作還不需要） Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: 我願意！但我需要一點時間 Q: 有沒有什麼話想對 Luka 說？A: 很感謝您，在我人生低谷的時候遞出了橄欖枝。 Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 有興趣","link":"/2020/09/06/mc1-11-trista/"},{"title":"饅頭計畫 #1 學員心得 (12) Celine","text":"Q: 怎麼稱呼？A: Celine Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: \b否，我沒有變轉職成功 Q: 你目前的職業是？A: 前端 Q: 你覺得饅頭計畫對你有幫助嘛？A: 有幫助，掌聲鼓勵鼓勵 Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A: 用 HackMD 做筆記、寫部落格、參加相關領域社群的習慣。 Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 比起外面、自己找的課程，大多是針對轉職所擬定的，但饅頭計畫是由一個真的在業的真人所引導，感覺對工程師的工作有更親近、踏實的銜接。 Q: 有沒有你很想學，但是沒有學到的東西？A: React Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: 我願意！而且我已經寫好了 Q: 有沒有什麼話想對 Luka 說？A: 哈囉 Luka 好久不見！上次在台北的聚會沒辦法跟到真可惜，希望之後還能有機會～（歡迎來台南呀！）想說的事情我用條列式好了。 1. 我最近忙著一個計畫（還有製作 Podcast ），耽擱了我找工作的時間，我的作品剩下購物網站（大概進度50%），因為計畫的關係預計延後到 10 月找工作，不過我還蠻有信心的，也覺得自己學得扎實，有想要利用空閒時間更深入地探究 React（雖然真的很忙）。2. 文章我在我的 Medium 上面，那篇講述轉職的文章有一個段落在提饅頭計畫，我覺得饅頭計畫是有機體（？），所以不只把它囿於只有當初在轉職時的一部分學習，之後有工作了，還是會覺得是饅頭計畫的一份子，也會想知道 Luka 和其他成員不管有沒有轉職成功，在各自領域的後續狀況、或許將來有機會參與彼此以及討論。3. 如果是第二彈饅頭計畫，我覺得工作變強好像是不錯的路線喔！現在雜七雜八的轉職入門課太多了，好像很多人沒有想過就想說先來學程式好了。不過不管是哪種，有需要的話我都樂意擔任助教:)4. 希望可以保持聯絡，找到工作之後再通知你～ Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 有興趣","link":"/2020/09/06/mc1-12-celine/"},{"title":"饅頭計畫 #1 學員心得 (13) Sherry","text":"Q: 怎麼稱呼？A: Sherry Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: 是，我成為了一個混水摸魚的工程師 Q: 你目前的職業是？A: 寫 Vue 的前端工程師 Q: 你覺得饅頭計畫對你有幫助嘛？A: 有幫助，掌聲鼓勵鼓勵 Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A: 在於找工作前的那段衝刺期，除了有Luka老師的提點外，其他找到工作的學員也都很樂於分享。每週定定的計劃讓自己的進步更有明確的方向。 Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 溝通語言簡單，邊講也會邊給其他建議 Q: 有沒有你很想學，但是沒有學到的東西？A: 一些工作上的實務觀念和可能面臨的問題與學習歷程 Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: 我願意！但我需要一點時間 Q: 有沒有什麼話想對 Luka 說？A: 謝謝老師，請老師也繼續加油！ Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 有興趣","link":"/2020/09/06/mc1-13-sherry/"},{"title":"饅頭計畫 #1 學員心得 (14) Orow","text":"Q: 怎麼稱呼？A: Orow Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: 是，我成為了一個人人稱羨的工程師 Q: 你目前的職業是？A: 前端 Q: 你覺得饅頭計畫對你有幫助嘛？A: 有幫助，掌聲鼓勵鼓勵 Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A: 從無到有開始學習前端，知道怎麼樣開始找資源學習，工作實務上遇到的狀況也可以持續跟mentor討論互相了解 Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 依照每個人狀況不同在調整學習曲線 Q: 有沒有你很想學，但是沒有學到的東西？A: 前端各種框架、docker、測試…等等 Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: 我願意！但我需要一點時間 Q: 有沒有什麼話想對 Luka 說？A: 饅頭計畫很棒！ Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 有興趣","link":"/2020/09/06/mc1-14-orow/"},{"title":"饅頭計畫 #1 學員心得 (15) Old Mo","text":"Q: 怎麼稱呼？A: 老莫 Q: 你在參加饅頭計畫前是否已經是工程師？A: 不，我不是工程師 Q: 在饅頭計畫後你是否變成了一位工程師？A: 是，我成為了一個混水摸魚的工程師 Q: 你目前的職業是？A: 前端為主，偶爾碰後端 Q: 你覺得饅頭計畫對你有幫助嘛？A: 有幫助，掌聲鼓勵鼓勵 Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A: 我沒有全程參與計畫，但我有問題就會問你，覺得在職涯能認識資深工程師還願意解惑是很好的事 Q: 你覺得 Luka 教學的過程最好的地方是什麼？A: 精準回答問題 Q: 有沒有你很想學，但是沒有學到的東西？A: 後端進階應用 Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？A: 我願意！但我沒有時間 Q: 有沒有什麼話想對 Luka 說？A: 你好帥 Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？A: 有興趣","link":"/2020/09/06/mc1-15-old-mo/"},{"title":"饅頭計畫 #2 學員心得 (1) Phoebe","text":"Q：名字A：Phoebe Q：你在參加饅頭計畫前是否已經是工程師？A：不，我不是工程師 Q：在饅頭計畫後你是否變成了一位工程師？A：是，我成為了一個混水摸魚的工程師 Q：你目前的職業是？A：前端 Q：你覺得饅頭計畫對你有幫助嘛？(單選)A：非常有幫助，讚！ Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A：改變最大的是養成了學習時寫部落格的習慣。這個習慣不僅可以幫助到自己，也幫助到別人。強迫自己產出也是饅頭計畫的一部分，而 Luka 也會針對你寫的文章給你意見，並提出許多建議，十分的用心。 Q：你覺得 Luka 教學的過程最好的地方是什麼？A：印象最深刻的是 Luka 有教大家如何提出「好」的問題。身為一個工程師，會問出好問題是非常重要的。那麼 Luka 也制定了許多規範，幫助大家問出更好的問題。Luka 也制訂一些任務，讓大家去完成。那完成之後，也會根據你做出來的東西給予意見，這些回饋都非常的寶貴。因為在剛成為 Junior 時，都會有許多的盲點，這時候就需要一位 mentor 來引導。 Q：有沒有你很想學，但是沒有學到的東西？A：TypeScript Q：有沒有什麼話想對我說？A：感謝 Luka 成立了饅頭計畫，給予當時還是學生的我許多的建議。讓我養成了良好的習慣，不管是在寫部落格，還是開發流程上，在饅頭計畫中都受益良多，讓我少走了一些彎路。期待饅頭計畫會越來越好！","link":"/2023/02/11/mc2-01-Phoebe/"},{"title":"饅頭計畫 #2 學員心得 (2) 慶慶","text":"Q：名字A：慶慶 Q：你在參加饅頭計畫前是否已經是工程師？A：不，我不是工程師 Q：在饅頭計畫後你是否變成了一位工程師？A：否，我沒有變轉職成功 Q：你目前的職業是？A：都不是 Q：你覺得饅頭計畫對你有幫助嘛？(單選)A：有幫助，掌聲鼓勵鼓勵 Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A：饅頭計畫是一個對於完全沒經驗的人來說非常棒的地方，有 Luka 帶領著我們，讓我們知道有什麼東西要學什麼東西可以不用急著學，對於自學來說會比較有方向性，因為我沒有轉職成功，但其中使用 Hackmd 紀錄筆記的習慣一直保持到現在，已經習慣把學習到的知識轉化成文字去複習。你覺得 Luka 教學的過程最好的地方是什麼？最好的地方就是 Luka 知道捷徑在哪裡，知道那些技能是現在市場最需要的以及知道哪些是 HR 想看的東西，對於要轉職的人來說非常有幫助，還有每周都會跟大家開直播聊聊天，會有種朋友在陪伴你而不是導師的感覺。有沒有你很想學，但是沒有學到的東西？我那時候很想學好 vue.js，但沒有 (跟老師無關 XD) 就放棄了。 Q：有沒有什麼話想對我說？A：首先對 Luka 很抱歉，當初覺得自己轉職失敗很尷尬所以之前你請我寫的心得我就沒寫了，其實當初會放棄 100% 都是自己的原因，那時候的年底家裡有一些事情，生活壓力太大，頓時覺得自己沒什麼心再往前進，那時候負面到覺得我那麼認真想轉職讓生活變得更好，家裡的事情讓我情緒上變得很暴躁，所以最後選擇繼續在原本的工作躺平算了的想法一直出現就到了前陣子事情結束才比較好一點，其實我去年十一月開始有嘗試寫一些東西 XD 但老實說我還是不知道自己要不要轉職，所以想要嘗試寫 JAVA 跟 SQL 搭配之前學的前端搞個網站玩玩看，如果有機會再看能不能真的轉職到軟體工程的領域，因為畢竟我現在生活上經濟壓力比較大，工廠的收入比較扛的住 XD 我很怕轉職薪水差太多會扛不太住，總之很感恩你，謝謝 Luka","link":"/2023/02/08/mc2-02-qing/"},{"title":"饅頭計畫 #2 學員心得 (3) Eva","text":"Q：名字A：Eva Q：你在參加饅頭計畫前是否已經是工程師？A：不，我不是工程師 Q：在饅頭計畫後你是否變成了一位工程師？A：是，我成為了一個人人稱羨的工程師 Q：你目前的職業是？A：前端 Q：你覺得饅頭計畫對你有幫助嘛？(單選)非常有幫助，讚！ Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A：1. 當時在 JS 上的學習卡關，透過課程給予 JS 觀念 以及大量實作，才開始建立起 JS 的觀念與實際運用的技巧，Q：也比較知道要如何持續精進JS以及甚至跨到框架的使用。2. 2. 在學習上比較有進度跟規劃，例如使用 github 所開任務或討論，可以依照自己的時間規劃每週應該達成的進度，或是也可以透過 github 上進行討論。 Q：你覺得 Luka 教學的過程最好的地方是什麼？A：1. 給予快速掌握新技術的方式，例如：範例實作、資料查找方式、筆記技巧、提問方法。2. 對於積極學習的學員，只要不害怕提問 Luka 都會給予回饋，對剛起步的學員來說給予極大的鼓勵以及安全感。 Q：有沒有你很想學，但是沒有學到的東西？A：1. 資料庫，在前公司偶爾會接觸後端工程師討論資料庫設計的部分，會希望可以理解，所以在會議中會稍微筆記，並學習資料庫的一些概念。2. 接下來學習方向就會依新工作需求或是未來發展方向進行，如 單元測試、react 等。 3. 後端的部分也會滿想學習，自己建立API 、資料庫並自己製作一個前後端專案（但此部分還不急）。 Q：有沒有什麼話想對我說？A：很感謝 Luka 在自己工作後或轉換工作，有技術或方向問題的詢問都願意給予回覆。另外，若未來有需要協助的地方，時間允許下，我也樂意參與喔！","link":"/2023/01/30/mc2-03-eva/"},{"title":"饅頭計畫 #2 學員心得 (4) 鈺涵","text":"Q：名字A：鈺涵 Q：你在參加饅頭計畫前是否已經是工程師？A：不，我不是工程師 Q：在饅頭計畫後你是否變成了一位工程師？A：否，因為人生選擇我沒有選擇成為工程師 Q：你目前的職業是？A：仍然是設計師阿哈哈哈啊哈 Q：你覺得饅頭計畫對你有幫助嘛？(單選)A：有幫助，掌聲鼓勵鼓勵 Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A：讓我了解工程師部分生態以及如何努力!雖然基於種種理由最後沒有轉職成功=_=但還是十分感謝饅頭哥的教誨XD Q：你覺得 Luka 教學的過程最好的地方是什麼？A：很好笑…………. Q：有沒有你很想學，但是沒有學到的東西？A：因為中斷了所以這一題無解……….你願意寫篇心得記錄饅頭計畫的過程嘛？我願意！但我需要一點時間有沒有什麼話想對我說？謝謝你= =下次回台灣我要請你吃飯XD","link":"/2023/01/29/mc2-04-yuha/"},{"title":"饅頭計畫 #2 學員心得 (5) Michael","text":"Q：名字A：Michael Q：你在參加饅頭計畫前是否已經是工程師？A：不，我不是工程師 Q：在饅頭計畫後你是否變成了一位工程師？A：是，我成為了一個混水摸魚的工程師 Q：你目前的職業是？A：前端 Q：你覺得饅頭計畫對你有幫助嘛？(單選)A：非常有幫助，讚！ Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A：讓我面對難題時，能夠冷靜有邏輯地解決問題你覺得 Luka 教學的過程最好的地方是什麼？有條理地拆解問題，以及引導解決問題的方向 Q：有沒有你很想學，但是沒有學到的東西？A：沒有 Q：有沒有什麼話想對我說？A：很感謝你的教導！","link":"/2023/01/28/mc2-05-michael/"},{"title":"饅頭計畫 #2 學員心得 (6) Shawn","text":"Q：名字A：Shawn Q：你在參加饅頭計畫前是否已經是工程師？A：不，我不是工程師 Q：在饅頭計畫後你是否變成了一位工程師？A：是，我成為了一個混水摸魚的工程師 Q：你目前的職業是？A：python相關工程師 Q：你覺得饅頭計畫對你有幫助嘛？(單選)A：有幫助，掌聲鼓勵鼓勵 Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A：主要是學習方式,將學習的知識轉化為筆記並進一步建立成部落格，紀錄學習歷程，這點滿重要的，也因為學習筆記，對我進入現在公司有滿大的加分，至今也仍然使用此方式在學習. Q：你覺得 Luka 教學的過程最好的地方是什麼？A：陪伴你一路轉職，會幫你盯進度，雖然我屬於那種丟了履歷莫名找到工作的，但還是謝謝Luka前期的密集盯哨與陪伴！ Q：有沒有你很想學，但是沒有學到的東西？A：目前還好 Q：有沒有什麼話想對我說？A：謝謝Luka,覺得這樣的計劃非常有意義，也因為這個計畫認識了其他轉職夥伴，可以互相交流","link":"/2023/01/28/mc2-06-Shawn/"},{"title":"饅頭計畫 #2 學員心得 (7) Lily","text":"Q：名字A：Lily Q：你在參加饅頭計畫前是否已經是工程師？A：是，我是工程師 Q：在饅頭計畫後你是否變成了一位工程師？A：是，我成為了一個人人稱羨的工程師 Q：你目前的職業是？A：前端 Q：你覺得饅頭計畫對你有幫助嘛？(單選)A：非常有幫助，讚！ Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可A：感謝 Luka 的耐心協助，指點該如何準備面試，撰寫履歷（很多時候真的不理解到底該怎麼執行，Luka 可以在下班後那麼多事情的情況下願意幫忙，真的很感動），後來也順利拿到薪水更高的 offer。 Q：你覺得 Luka 教學的過程最好的地方是什麼？A：很有耐心、會指點方向讓學員主動學習，而不是直接提供答案 Q：你覺得 Luka 教學的過程最好的地方是什麼？A：pipeline 運作吧 Q：有沒有什麼話想對我說？A：Hi 教練，新年快樂啊～","link":"/2023/01/27/mc2-07-lily/"},{"title":"【 Python 資料科學 】書籍推薦","text":"Data Science from Scratch 中文版（第二版）：用 Python 學資料科學 這本裡面有大量的名詞幫，適合當工具書來查詢，硬啃的話有點累。名詞如下： 資料視覺化, 線性代數, 統計學, 機率, 假設與推論, 梯度遞減, 取得資料, 處理資料, 機器學習, k最近鄰, 單純貝氏, 簡單線性迴歸, 多元迴歸, 邏輯迴歸, 決策樹, 神經網路, 深度學習, 集群, 自然語言處理, 網路分析, 推薦系統, 資料庫與SQL, MapReduce Python資料分析 第二版 這本是 pandas 的作者寫的書，本書重點在於使用 pandas 與 NumPy 進行資料載入、資料前處理、資料處理、資料視覺化 … 等等的步驟。如果想要學習完整的流程挺推薦。 Python資料科學學習手冊 本書分為五個章節，從資料科學開始介紹，接著介紹常用的 IPython、NumPy、Pandas 資料處理、Matplotlib 資料視覺化、最後介紹 Sckit-Learn 來學習機器學習。非常完整的介紹資料科學的流程。 參考資料[分享] 2020 推薦 Python資料科學的書","link":"/2021/11/25/python/01-data-science-book/"},{"title":"【 Python 教學 】什麼是 PyPI？跟 pip 又有什麼關係呢？","text":"什麼是 PyPI？ PyPI（英語 Package Index，簡稱PyPI），是 的官方的第三方套件儲存庫。 如果用生活的例子來比喻，就像 Android 手機，有 google play 可以安裝軟體。iphone 有 app store 來安裝軟體。在這之中 PyPI 就像是 google play 或是 app store. 在我們使用 pip 安裝套件的時候，下指令 pip install 套件名稱 預設就是從 PyPI 下載套件。 在 PyPI 上搜尋套件官方網站 我們試著搜尋 web 框架 flask 。看到第一個就是搜尋結果，後方的日期是更新的時間。 點擊進去之後，就可以看到 Flask 的介紹，還有貼心的教學， 在指令列輸入 pip install flask 即可安裝。 在 PyPI 上查看簡易介紹下方還有簡單的範例，不過因為這些套件是第三方 (Third-Party) 維護，也就是開發套件的人是自主開發的，因此我們需要到各自的官網看詳細教學。 在 PyPI 找到套件的官方網站，查看詳細文件所以我們點擊 documentation 就可以進入到 Flask 的官方網站，最詳盡的文件可以在這邊找到。 PyPI 跟 pip 有什麼關係呢？最後我們來回答標題上的第二個問題，PyPI 跟 pip 的關係，剛剛在操作過程已經知道了。pip install 某某套件 預設的官方套件商店就是 PyPI。 總結今天介紹的是從 PyPI 官方網站搜尋到需要的套件 (Flask)，然後使用指令安裝需要的套件，最後是如何查詢 Flask 的使用方式。","link":"/2021/11/27/python/02-what-is-pypi/"},{"title":"【 Python 冷知識 】你知道 PyPI 怎麼唸嘛？","text":"撰寫另一篇文章 【 Python 教學 】什麼是 PyPI？跟 pip 又有什麼關係呢？的時候，發現 PyPI 的時候，產生了一個疑問，PyPI該怎麼唸？ 可能的答案有： 拍拍 批歪批唉 批批 拍批埃 究竟是哪一個，你念對了嘛？答案在下方教學影片： How to pronounce PyPI (beginner) Anthony explains #020 - YouTube","link":"/2021/11/29/python/03-how-to-pronounce-pypi/"},{"title":"【 Flask 教學 】Hello, Flask！五分鐘建立你的第一個 Flask 應用","text":"輕量型 Web 框架 - Flask Flask 是一款 Python 的網頁開發框架。它的特色就是輕巧。Flask 的官方網站用 Micro 這個字來說明 Flask 的設計哲學。 Micro 意味著，一開始什麼都沒有，沒有資料庫，沒有好用的表單工具，Flask 就提供給你一個非常非常精簡的 Web 框架。 如果你需要資料庫功能，那麼你需要找尋套件，例如：你想要連接 MySQL 的話，需要安裝 Flask-SQLAlchemy 套件，來擴展你的 Flask 應用程式。 這跟 Python 中另一個主流框架，Django 大相逕庭。然而 Flask 與 Django 的市占率大概 50% vs 50%，非常有趣，意味著各有各的擁護者。 瞭解了 Flask 的設計哲學後，接下來我們實作的 Hello World 應用程式，便是只有提供網頁功能，並且只有「一個檔案」的迷你專案。 Hello Flask！初學程式的時候發現一個奇特的現象，為什麼第一個程式要輸出 Hello World 呢？因為我們第一件事情就是要確保環境能夠正確執行。 安裝 Flask使用 pip 安裝 Flask 1pip install flask 組織專案結構安裝完成之後，我們先建立一個乾淨的資料夾命名為 hello_flask。接著在裡面建立一個新檔案命名為 hello.py所以現在我們的專案結構是 hello_flask 資料夾底下，有一個 hello.py 的檔案 12hello_flask└── hello.py 接著我們編輯 hello.py 的內容，將以下內容撰寫上檔案 1234567891011from flask import Flaskapp = Flask(__name__)@app.route(&quot;/&quot;)def hello_world(): return &quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;if __name__ == '__main__': app.run(port=5000) 在本地端運行接著下列指令， 12export FLASK_APP=helloflask run 就會發現終端機的畫面，Flask Server (伺服器)已經開始在你的本地開發環境，也就是你的電腦上面運轉囉！ 此時我們複製終端機上的顯示的網址 http://127.0.0.1:5000/ 到瀏覽器上，打開便會看到 Hello World！。 先讓程式跑起來，接下來我們才可以嘗試各式各樣的開發。 參考資料 Flask 官方網站 實作一個簡單的 Flask 入門 | Max行銷誌","link":"/2021/11/29/python-flask/01-hello-flask/"},{"title":"【 Flask 教學 】五分鐘學會 Flask 中的 GET, POST, PUT, PATCH, DELETE","text":"本文詳細講解如何在 Flask 中使用 HTTP 請求方法，包括 GET、POST、PUT、PATCH 和 DELETE。文章介紹每種請求方法的用途和使用方法，並提供了相應的程式碼範例，使讀者能夠更好地理解如何在 Flask 中使用這些請求方法。本文適合初學者閱讀，可快速了解 Flask 中 HTTP 請求方法的基本使用方法。 GET 請求GET 請求用於從伺服器獲取資料。在 Flask 中，使用 GET 請求非常簡單。以下是一個簡單的範例，使用 GET 請求從伺服器獲取資料： 12345678from flask import Flask, jsonifyapp = Flask(__name__)@app.route('/data', methods=['GET'])def get_data(): data = {'name': 'Alice', 'age': 25} return jsonify(data) 在這個範例中，我們使用 Flask 的 @app.route 裝飾器來指定路由，其中 methods=['GET'] 指定了使用 GET 請求。我們定義了一個 get_data 函數，返回一個包含 name 和 age 屬性的 JSON Response。 POST 請求POST 請求用於向伺服器提交資料。在 Flask 中，使用 POST 請求同樣非常簡單。以下是一個範例，使用 POST 請求提交表單資料： 12345678910from flask import Flask, request, jsonifyapp = Flask(__name__)@app.route('/data', methods=['POST'])def post_data(): name = request.form['name'] age = request.form['age'] data = {'name': name, 'age': age} return jsonify(data) 在這個範例中，我們同樣使用 @app.route 裝飾器指定路由和請求方法。我們定義了一個 post_data 函數，使用 request.form 獲取提交的表單資料，然後將資料封裝成 JSON Response返回。 PUT 請求PUT 請求用於更新伺服器上的資料。在 Flask 中，使用 PUT 請求也很簡單。以下是一個範例，使用 PUT 請求更新一條記錄： 1234567891011from flask import Flask, request, jsonifyapp = Flask(__name__)data = {'name': 'Alice', 'age': 25}@app.route('/data/&lt;name&gt;', methods=['PUT'])def put_data(name): age = request.form['age'] data[name] = age return jsonify(data) 在這個範例中，我們使用了 URL 參數 &lt;name&gt; 來指定要更新的記錄。我們定義了一個 put_data 函數，使用 request.form 獲取新的年齡資料，並將資料更新到 data 字典中。 PATCH 請求PATCH 請求用於部分更新伺服器上的資料。在 Flask 中，使用 PATCH 請求同樣很簡單。以下是一個範例，使用 PATCH 請求部分更新一條記錄： 1234567891011from flask import Flask, request, jsonifyapp = Flask(__name__)data = {'name': 'Alice', 'age': 25}@app.route('/data/&lt;name&gt;', methods=['PATCH'])def patch_data(name): age = request.form['age'] data[name]['age'] = age return jsonify(data) 在這個範例中，我們同樣使用 URL 參數 &lt;name&gt; 來指定要更新的記錄。我們定義了一個 patch_data 函數，使用 request.form 獲取新的年齡資料，並將資料部分更新到 data 字典中。 DELETE 請求DELETE 請求用於刪除伺服器上的資料。在 Flask 中，使用 DELETE 請求同樣非常簡單。以下是一個範例，使用 DELETE 請求刪除一條記錄： 12345678910from flask import Flask, jsonifyapp = Flask(__name__)data = {'name': 'Alice', 'age': 25}@app.route('/data/&lt;name&gt;', methods=['DELETE'])def delete_data(name): del data[name] return jsonify(data) 在這個範例中，我們同樣使用 URL 參數 &lt;name&gt; 來指定要刪除的記錄。我們定義了一個 delete_data 函數，使用 Python 的 del 語句從 data 字典中刪除指定的記錄，並將更新後的資料封裝成 JSON Response返回。","link":"/2023/02/11/python-flask/02-routes/"},{"title":"【 Flask 教學 】Flask SQLAlchemy | Python 與資料庫的橋樑","text":"在本篇文章，我們將介紹 Flask-SQLAlchemy，讓我們能夠在 Python Flask 應用程式中使用 SQLAlchemy 的 ORM 和 Flask-SQLAlchemy 進行資料庫溝通。 Flask 是一個輕量級的 Python Web 框架，用於建立 Web 應用程式，而 SQLAlchemy 則是一個 Python 庫，提供對關係資料庫的高效和高效能的訪問。 Flask-SQLAlchemy 是一個用於 Flask 應用程式的擴展程式，簡化了使用 SQLAlchemy 的複雜性，並提供了常見的對象和模式，例如與每個 Web 請求相關聯的會話、模型和引擎，同時不會更改 SQLAlchemy 的工作方式。 下面我們來看看如何在 Python Flask 應用程式中使用 Flask-SQLAlchemy。 安裝 Flask-SQLAlchemy要使用 Flask-SQLAlchemy，首先需要在計算機上安裝它。可以使用以下命令在終端中安裝 Flask-SQLAlchemy： 1pip install Flask-SQLAlchemy 建立 Flask 應用程式 在使用 Flask-SQLAlchemy 之前，需要建立一個 Flask 應用程式。可以使用以下程式碼建立一個簡單的 Flask 應用程式： 12from flask import Flaskapp = Flask(__name__) 設定資料庫 在 Flask-SQLAlchemy 中，可以使用 PostgreSQL、MySQL、SQLite 或 Oracle 等多種資料庫。在本節中，我們將使用 SQLite3 作為資料庫。可以使用以下程式碼設定資料庫： 123from flask_sqlalchemy import SQLAlchemyapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///example.db'db = SQLAlchemy(app) 上述程式碼將建立一個名為 example.db 的 SQLite3 資料庫。 建立資料庫模型在 Flask-SQLAlchemy 中，資料庫模型由 Python Class定義。以下是一個簡單的範例： 1234567class User(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(80), nullable=False) email = db.Column(db.String(120), unique=True, nullable=False) def __repr__(self): return '&lt;User %r&gt;' % self.username 上述程式碼定義了一個名為 User 的模型，包含三個屬性：id、name 和 email。 建立資料庫表在Flask-SQLAlchemy 中，可以使用以下程式碼建立資料庫表： 1db.create_all() 上述程式碼將根據模型定義建立資料庫表。 添加資料到資料庫在 Flask-SQLAlchemy 中，可以使用以下程式碼向資料庫添加資料： 123user = User(name='John Doe', email='johndoe@example.com')db.session.add(user)db.session.commit() 上述程式碼將建立一個新的 User 對象，將其添加到資料庫中，並提交更改。 從資料庫檢索資料在 Flask-SQLAlchemy 中，可以使用以下程式碼從資料庫檢索資料： 1users = User.query.all() 上述程式碼將檢索資料庫中的所有 User 對象，並將它們作為列表返回。 更新資料庫中的資料在 Flask-SQLAlchemy 中，可以使用以下程式碼更新資料庫中的資料： 123user = User.query.filter_by(email='johndoe@example.com').first()user.name = 'John'db.session.commit() 上述程式碼將從資料庫中檢索具有指定電子郵件地址的 User 對象，將其名稱更改為 John，然後提交更改。 刪除資料庫中的資料在 Flask-SQLAlchemy 中，可以使用以下程式碼從資料庫中刪除資料： 123user = User.query.filter_by(email='johndoe@example.com').first()db.session.delete(user)db.session.commit() 上述程式碼將從資料庫中刪除具有指定電子郵件地址的 User 對象，然後提交更改。 小節綜上所述，本篇教學文章介紹了 Flask-SQLAlchemy 的基本用法，包括建立 Flask 應用程式、設定資料庫、建立資料庫模型、建立資料庫表、添加資料到資料庫、從資料庫檢索資料、更新資料庫中的資料和刪除資料庫中的資料。這些步驟提供了初學者所需的基礎知識，可以用來構建簡單的 Python Flask 應用程式，以及進一步擴展以實現更複雜的資料庫操作。需要注意的是，Flask-SQLAlchemy 需要一定的學習曲線，但一旦掌握了基本概念，就可以輕鬆地使用它來管理資料庫。 希望本篇教學文章能夠為初學者提供一個良好的起點，幫助他們進入 Flask-SQLAlchemy 的世界，並開始在 Python Flask 應用程式中進行資料庫溝通。 延伸閱讀以下是本次回答所使用的參考資料的標題和連結： Flask-SQLAlchemy 快速入門 和 Flask-SQLAlchemy 快速入門：兩篇 Flask-SQLAlchemy 的快速入門指南，介紹了 Flask-SQLAlchemy 的基本用法，是初學者快速入門 Flask-SQLAlchemy 的好資源。 如何在 Flask 應用程式中使用 SQLAlchemy 進行資料庫 ：這篇教學透過一個小型的學生管理系統展示了如何使用 Flask-SQLAlchemy 擴展來完成基本的資料庫溝通，如連接到資料庫伺服器、建立資料庫表、添加資料、檢索資料、更新資料和刪除資料等操作。 如何使用 Flask Blueprints 和 Flask-SQLAlchemy 構建大型 Flask 應用程式的結構：這篇教學詳細介紹了如何使用 Flask 藍圖和 Flask-SQLAlchemy 構建大型 Flask 應用程式的架構。本文提供了範例程式碼和詳細的解釋，是進階學習 Flask-SQLAlchemy 的好資源。 Flask-SQLAlchemy 文件：Flask-SQLAlchemy 的官方文件，提供了完整的 API 參考、常見問題解答和高級主題等內容。無論你是初學者還是經驗豐富的 Python 開發者，都可以在這裡找到所需的資訊。 Flask SQLAlchemy (with Examples)：這是一篇包含範例的教學，介紹了如何使用 Flask-SQLAlchemy 建立和操作資料庫表。本文包含了範例程式碼和詳細的解釋，是初學者快速掌握 Flask-SQLAlchemy 的好資源。 使用 Flask 和 SQLAlchemy 建立一個基本的 CRUD 應用程式：這篇","link":"/2023/02/13/python-flask/03-relational-database/"},{"title":"【 Flask 教學 】Flask Factory 介紹","text":"Flask 是一個輕量的 Python 網頁應用框架，因為它簡單易用而廣受歡迎。其中，Flask Factory 是一個新的概念，可以更加靈活地建立 Flask 應用程式。本文將介紹 Flask Factory 的概念以及如何在 Flask 應用程式中使用它。 Flask Factory 是什麼？在傳統的 Flask 應用程式中，我們會在一個檔案中建立 Flask 應用程式物件，然後將它與路由和視圖函式一起定義在同一個檔案中。然而，這種方式的維護和擴展性很差。Flask Factory 的概念就是將 Flask 應用程式物件的建立和設定分離出來，以便更靈活地管理 Flask 應用程式。 Flask Factory 通常會分為三個部分： 工廠函式：這是建立 Flask 應用程式物件的函式，通常是一個叫做 create_app 的函式。這個函式會負責建立 Flask 應用程式物件、設定 Flask 應用程式以及註冊路由和視圖函式。 設定：這是 Flask 應用程式的設定，可以使用 Python Class 或字典來定義。 視圖函式：這些是處理路由的函式，通常是一個或多個藍圖。 如何在 Flask 中使用工廠？以下是一個簡單的 create_app 工廠函式範例： 1234567891011from flask import Flaskdef create_app(): app = Flask(__name__) app.config['DEBUG'] = True @app.route('/') def hello_world(): return 'Hello, World!' return app 在上面的範例中，create_app 函式建立了一個 Flask 應用程式物件，並定義了一個路由和一個視圖函式。此外，它還設定了 DEBUG 設定選項，以便在偵錯模式下執行應用程式。 這個工廠函式可以在另一個檔案中被呼叫，並使用以下程式碼啟動應用程式： 1234from myapp import create_appapp = create_app()app.run() 在上面的範例中，create_app 函式在另一個名為 myapp 的模組中定義，然後被呼叫以建立 Flask 應用程式物件。然後，run 方法啟動了應用程式。 除了上面的範例，我們還可以使用工廠函式來建立複雜的 Flask 應用程式。例如，我們可以使用藍圖來組織視圖函式，使用 Flask 插件來擴展應用程式功能，等等。 以下是一個更複雜的工廠函式範例： 123456789101112131415from flask import Flaskfrom myapp.views import main_bp, admin_bpfrom myapp.extensions import db, login_managerdef create_app(config_object): app = Flask(__name__) app.config.from_object(config_object) db.init_app(app) login_manager.init_app(app) app.register_blueprint(main_bp) app.register_blueprint(admin_bp, url_prefix='/admin') return app 在上面的範例中，create_app 函式建立了一個 Flask 應用程式物件，並使用 config_object 設定來設定應用程式。它還初始化了一些 Flask 插件，如 db 和 login_manager，並將它們與應用程式關聯起來。最後，它註冊了兩個藍圖 main_bp 和 admin_bp，這些藍圖包含不同的視圖函式。 這個工廠函式可以在另一個檔案中被呼叫，並使用以下程式碼啟動應用程式： 12345from myapp import create_appfrom myapp.config import ProductionConfigapp = create_app(ProductionConfig)app.run() 在上面的範例中，create_app 函式在 myapp 模組中定義，然後使用 ProductionConfig 設定物件建立 Flask 應用程式物件。然後，run 方法啟動了應用程式。 總結一下，Flask Factory 是一個有用的概念，可以使我們更加靈活地建立和管理 Flask 應用程式。通過將建立 Flask 應用程式物件的過程分離出來，我們可以更輕鬆地進行擴展和維護。如果你還沒有嘗試過 Flask Factory，我們建議你嘗試一下，體驗一下其帶來的好處。","link":"/2023/02/15/python-flask/04-flask-factory/"},{"title":"【 Flask 教學 】用 Flask Blueprint 組織程式碼","text":"Flask Blueprint 組織程式碼的幾種方式Blueprint 是一個用於標示架構和組織軟體專案的概念。在這裡，我們將探討三種不同的專案組織方式：單一應用程式、模組化應用程式，以及使用 Flask Blueprint 的應用程式。以下是這三種組織方式的程式範例： 按功能劃分藍圖在這種組織方式中，我們根據應用程式的功能劃分藍圖。這個範例包含了一個簡單的 Flask 應用程式，使用了按功能劃分的 Blueprint 組織方式。應用程式有兩個功能模塊：身份驗證（auth）和文章（posts）。每個模塊都有自己的視圖和模板。在 app.py 中，我們註冊了兩個藍圖：auth_blueprint 和 posts_blueprint。 目錄結構： 12345678910111213myproject/ ├── auth/ │ ├── __init__.py │ ├── views.py ├── posts/ │ ├── __init__.py │ ├── views.py ├── templates/ │ ├── auth/ │ │ ├── login.html │ ├── posts/ │ │ ├── list.html └── app.py app.py： 12345678910from flask import Flaskfrom auth.views import auth_blueprintfrom posts.views import posts_blueprintapp = Flask(__name__)app.register_blueprint(auth_blueprint)app.register_blueprint(posts_blueprint)if __name__ == '__main__': app.run() auth/init.py： 1# 空文件 auth/views.py： 1234567from flask import Blueprint, render_templateauth_blueprint = Blueprint('auth', __name__, template_folder='templates/auth')@auth_blueprint.route('/login')def login(): return render_template('auth/login.html') templates/auth/login.html： 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Login&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Login Page&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; posts/init.py： 1# 空文件 posts/views.py： 1234567from flask import Blueprint, render_templateposts_blueprint = Blueprint('posts', __name__, template_folder='templates/posts')@posts_blueprint.route('/posts')def list_posts(): return render_template('posts/list.html') templates/posts/list.html： 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Posts&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Posts List&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 按角色劃分藍圖在這種組織方式中，我們根據不同的使用者角色（如管理員、使用者…等）劃分藍圖。這樣可以讓應用程式的不同角色有各自的功能界面和邏輯。以下是按角色劃分 Blueprint 的簡單範例： 目錄結構： 12345678910111213myproject/ ├── admin/ │ ├── __init__.py │ ├── views.py ├── user/ │ ├── __init__.py │ ├── views.py ├── templates/ │ ├── admin/ │ │ ├── dashboard.html │ ├── user/ │ │ ├── profile.html └── app.py app.py： 12345678910from flask import Flaskfrom admin.views import admin_blueprintfrom user.views import user_blueprintapp = Flask(__name__)app.register_blueprint(admin_blueprint, url_prefix='/admin')app.register_blueprint(user_blueprint, url_prefix='/user')if __name__ == '__main__': app.run() admin/init.py： 1# 空文件 admin/views.py： 1234567from flask import Blueprint, render_templateadmin_blueprint = Blueprint('admin', __name__, template_folder='templates/admin')@admin_blueprint.route('/dashboard')def dashboard(): return render_template('admin/dashboard.html') templates/admin/dashboard.html： 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Admin Dashboard&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Admin Dashboard&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; user/init.py： 1# 空文件 user/views.py： 1234567from flask import Blueprint, render_templateuser_blueprint = Blueprint('user', __name__, template_folder='templates/user')@user_blueprint.route('/profile')def profile(): return render_template('user/profile.html') templates/user/profile.html： 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;User Profile&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;User Profile&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 第一個範例按照角色劃分，有 admin 和 user 兩個角色，每個角色有對應的視圖和模板。這些範例分別展示了按角色劃分和按資源劃分的兩種 Flask Blueprint 組織方式。 按資源類型劃分藍圖：在這種組織方式中，我們根據應用程式中的資源類型（如文章、評論等）劃分藍圖。這樣可以讓程式碼更具模組化，便於維護和擴展。在 app.py 中，我們註冊了相應的藍圖。 目錄結構： 12345678910111213myproject/ ├── posts/ │ ├── __init__.py │ ├── views.py ├── comments/ │ ├── __init__.py │ ├── views.py ├── templates/ │ ├── posts/ │ │ ├── list.html │ ├── comments/ │ │ ├── list.html └── app.py app.py： 12345678910from flask import Flaskfrom posts.views import posts_blueprintfrom comments.views import comments_blueprintapp = Flask(__name__)app.register_blueprint(posts_blueprint, url_prefix='/posts')app.register_blueprint(comments_blueprint, url_prefix='/comments')if __name__ == '__main__': app.run() posts/init.py： 1# 空文件 posts/views.py： 1234567from flask import Blueprint, render_templateposts_blueprint = Blueprint('posts', __name__, template_folder='templates/posts')@posts_blueprint.route('/')def list_posts(): return render_template('posts/list.html') templates/posts/list.html： 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Posts&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Posts List&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; comments/init.py： 1# 空文件 comments/views.py： 1234567from flask import Blueprint, render_templatecomments_blueprint = Blueprint('comments', __name__, template_folder='templates/comments')@comments_blueprint.route('/')def list_comments(): return render_template('comments/list.html') templates/comments/list.html： 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Comments&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Comments List&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 比較三種方案下表對比了使用 Flask Blueprint 組織程式碼的三種方式的優缺點： 方式 優點 缺點 按功能劃分藍圖 功能模塊清晰 功能模塊過多時結構可能變得複雜 有利於專案的擴展性和可維護性 按角色劃分藍圖 便於實現角色之間的隔離和權限控制 角色之間存在相似功能時可能導致程式碼重複 有利於專案的擴展性和可維護性 按資源類型劃分藍圖 程式碼具有高度模組化 資源之間有相互依賴時可能需要更多的協調和溝通 便於維護和擴展 在選擇組織方式時，應該根據專案的需求和規模來決定。有時候，可以將這些組織方式結合使用，以便更好地滿足專案需求。 混合使用綜合以上三種使用 Flask Blueprint 的程式碼組織方式，開發者可以根據專案需求靈活選擇或混合應用。在實際應用中，專案可能需要更細緻的組織結構，此時可以將多種組織方式結合起來，以便更好地滿足需求。 例如，我們可以根據應用程式的功能和資源類型同時劃分藍圖： 1234567891011121314151617181920212223242526272829303132333435myproject/ ├── auth/ │ ├── __init__.py │ ├── views.py ├── admin/ │ ├── posts/ │ │ ├── __init__.py │ │ ├── views.py │ ├── images/ │ │ ├── __init__.py │ │ ├── views.py ├── user/ │ ├── posts/ │ │ ├── __init__.py │ │ ├── views.py │ ├── comments/ │ │ ├── __init__.py │ │ ├── views.py ├── templates/ │ ├── auth/ │ │ ├── login.html │ │ ├── register.html │ ├── admin/ │ │ ├── posts/ │ │ │ ├── manage_posts.html │ │ ├── images/ │ │ │ ├── manage_images.html │ ├── user/ │ │ ├── posts/ │ │ │ ├── list.html │ │ │ ├── detail.html │ │ ├── comments/ │ │ │ ├── list.html │ │ │ ├── new_comment.html └── app.py 在這個範例中，我們同時根據功能（身份驗證、管理員、使用者）和資源類型（文章、圖片、評論）劃分藍圖。這樣可以使程式碼更具模組化，便於維護和擴展。同時，不同角色的功能和權限也得到了清晰的區分。","link":"/2023/02/16/python-flask/05-flask-blueprint/"},{"title":"【 Flask 教學 】如何在 Flask 設置和操作 Cookie","text":"在 Python Flask 中，cookie 是一種儲存在使用者瀏覽器中的小型資料塊。通常情況下，我們使用 cookie 來記錄使用者的首選設定、登錄資料以及其他與使用者相關的資訊。在 Flask 應用程式中，使用 cookie 的過程非常簡單。 設置 cookie要在 Flask 中設置 cookie，我們需要使用 response 物件的 set_cookie() 方法。這個方法接受以下參數： key：cookie 的名稱，必須是一個字符串 value：cookie 的值，必須是一個字符串，默認為空字符串 max_age：cookie 的存活時間，以秒為單位，默認為 None 以下是一個簡單的 Flask 應用程式，演示如何設置 cookie： 123456789from flask import Flask, make_responseapp = Flask(__name__)@app.route('/')def index(): resp = make_response('Setting a cookie!') resp.set_cookie('my_cookie', 'my_value') return resp 在上面的程式碼中，我們建立了一個名為 my_cookie 的 cookie，其值為 my_value。當使用者訪問該頁面時，他們的瀏覽器將接收到這個 cookie。 讀取 cookie要讀取 cookie，我們可以使用 request 物件的 cookies 屬性。這個屬性是一個字典，其中包含了所有使用者瀏覽器中的 cookie。以下是一個簡單的 Flask 應用程式，演示如何讀取 cookie： 12345678from flask import Flask, requestapp = Flask(__name__)@app.route('/')def index(): my_cookie = request.cookies.get('my_cookie') return f'The value of my_cookie is {my_cookie}' 在上面的程式碼中，我們使用 request.cookies.get() 方法讀取名為 my_cookie 的 cookie。如果該 cookie 存在，它的值將被存儲在 my_cookie 變數中。否則，my_cookie 將為 None。 刪除 cookie要刪除 cookie，我們只需要設置 cookie 的 max_age 參數為 0。以下是一個簡單的 Flask 應用程式，演示如何刪除 cookie： 123456789from flask import Flask, make_responseapp = Flask(__name__)@app.route('/')def index(): resp = make_response('Deleting a cookie!') resp.set_cookie('my_cookie', '', max_age=0) return resp 在上面的程式碼中，我們建立了一個名為 my_cookie 的 cookie，並將其 max_age 設置為 0。這意味著該 cookie 的存活時間為 0 秒，瀏覽器將立即刪除它。 使用 session雖然 cookie 是一種非常方便的儲存使用者設置和資料的方式，但是在一些情況下，它們可能不夠安全。為了增強安全性，Flask 提供了一種名為 session 的機制，它會在伺服器端儲存使用者資料，並使用一個加密的 cookie 將使用者資料傳遞給使用者瀏覽器。以下是一個簡單的 Flask 應用程式，演示如何使用 session： 1234567891011121314from flask import Flask, sessionapp = Flask(__name__)app.secret_key = 'my_secret_key'@app.route('/')def index(): session['my_session'] = 'my_value' return 'Setting a session!'@app.route('/get_session')def get_session(): my_session = session.get('my_session') return f'The value of my_session is {my_session}' 在上面的程式碼中，我們使用 session 物件儲存使用者資料。在設置 session 時，我們可以像設置字典一樣設置 session 的鍵和值。在讀取 session 時，我們使用 session.get() 方法。需要注意的是，使用 session 時需要設置 app.secret_key 屬性，該屬性是用於加密 session 的關鍵。 使用情境以下是使用 Python Flask 框架來實現一些使用 Cookie 的範例： 使用者身份驗證1234567891011121314151617from flask import Flask, request, make_responseapp = Flask(__name__)@app.route('/')def index(): resp = make_response('Welcome!') resp.set_cookie('user_id', '123') return resp@app.route('/dashboard')def dashboard(): user_id = request.cookies.get('user_id') if user_id == '123': return 'Dashboard' else: return 'Unauthorized' 在上面的程式碼中，當使用者訪問首頁時，我們設置了一個名為 user_id 的 cookie，其值為 123。當使用者訪問儀表板頁面時，我們讀取了 user_id cookie 的值，並檢查其是否等於 123。如果相等，則返回儀表板頁面，否則返回未經授權的錯誤。 記住使用者首選設置12345678910111213141516from flask import Flask, request, make_responseapp = Flask(__name__)@app.route('/')def index(): lang = request.cookies.get('lang', 'en') resp = make_response(f'Language: {lang}') resp.set_cookie('lang', lang) return resp@app.route('/set_lang/&lt;lang&gt;')def set_lang(lang): resp = make_response('Language set!') resp.set_cookie('lang', lang) return resp 在上面的程式碼中，我們讀取了名為 lang 的 cookie 的值，並將其用作網站的語言。如果 cookie 不存在，我們默認使用英語。當使用者訪問網站時，我們將 lang cookie 的值設置為當前語言。如果使用者訪問 /set_lang/&lt;lang&gt; 頁面，我們將 lang cookie 的值設置為使用者指定的語言。 記住使用者在線狀態123456789101112131415from flask import Flask, request, make_responseapp = Flask(__name__)@app.route('/')def index(): resp = make_response('Welcome!') resp.set_cookie('online', 'true') return resp@app.route('/logout')def logout(): resp = make_response('Logged out!') resp.set_cookie('online', 'false') return resp 在上面的程式碼中，當使用者訪問首頁時，我們設置了一個名為 online 的 cookie，其值為 true，表示使用者在線。當使用者訪問登出頁面時，我們將 online cookie 的值設置為 false，表示使用者離線。 記住使用者的購物車1234567891011121314151617181920212223242526272829from flask import Flask, request, make_responseapp = Flask(__name__)@app.route('/')def index(): resp = make_response('Welcome to our store!') resp.set_cookie('cart', '') return resp@app.route('/add_to_cart/&lt;item&gt;')def add_to_cart(item): cart = request.cookies.get('cart') if cart: cart += f',{item}' else: cart = item resp = make_response(f'{item} added to cart!') resp.set_cookie('cart', cart) return resp@app.route('/view_cart')def view_cart(): cart = request.cookies.get('cart') if cart: items = cart.split(',') return f'Items in your cart: {&quot;, &quot;.join(items)}' else: return 'Your cart is empty' 在上面的程式碼中，當使用者訪問首頁時，我們設置了一個名為 cart 的 cookie，其值為空，表示使用者的購物車是空的。當使用者訪問添加到購物車頁面時，我們讀取 cart cookie 的值，將新的項目添加到購物車中，然後更新 cart cookie 的值。當使用者訪問查看購物車頁面時，我們讀取 cart cookie 的值，並顯示購物車中的所有項目。 記住使用者的瀏覽歷史12345678910111213141516171819202122232425262728from flask import Flask, request, make_responseapp = Flask(__name__)@app.route('/')def index(): resp = make_response('Welcome to our store!') resp.set_cookie('history', '') return resp@app.route('/view_product/&lt;product&gt;')def view_product(product): history = request.cookies.get('history') if history: products = history.split(',') if product not in products: history += f',{product}' else: history = product resp = make_response(f'Viewing product: {product}') resp.set_cookie('history', history) return resp@app.route('/view_history')def view_history(): history = request.cookies.get('history') if history: products = history.split 總結在 Flask 中，使用 cookie 是一種非常簡單和方便的方式，可以儲存使用者設置和資料。在上面的教學中，我們學習了如何設置、讀取和刪除 cookie，以及如何使用 session 增強安全性。通過這些方法，我們可以更加靈活地設計 Flask 應用程式，以滿足不同的需求。 參考資料 OverIQ：簡單介紹 Flask 中如何使用 set_cookie() 方法設置 cookie。 GeeksforGeeks：提供 Flask cookie 的概述，並介紹如何設置和讀取 cookie。 Flask documentation：官方 Flask 文件，提供全面的關於 cookie 的指南，包括如何設置、讀取、刪除 cookie，以及使用 session。 Python Basics：簡單介紹在 Flask 中如何使用 make_response() 函數和 set_cookie() 方法來設置 cookie。 Stack Overflow：Stack Overflow 討論串，討論了在 Flask 中設置 cookie 會面臨的問題以及如何解決。 Protutorialplus：提供了如何在 Python Flask 中設置和讀取 cookie 的簡單教學。","link":"/2023/02/16/python-flask/06-flask-cookie/"},{"title":"【 Flask 教學 】 透過 URL 傳遞參數與透過表單傳遞","text":"通過 URL 傳遞參數嗨，動態路由你好！Flask 是一個輕量級的 Web 框架，提供了簡單易用的路由定義和視圖函數。其中一個優勢是通過 URL 傳遞參數的能力，也就是動態路由。在這個路由方式下，URL 中的一部分可以作為參數傳遞到視圖函數中，從而實現不同的動態內容呈現。 123@app.route('/greet/&lt;name&gt;')def greet(name): return f'Hello, {name}!' 此路由接受 URL 中的 name 參數，我們可以通過 name 參數在函數中訪問它。例如，如果我們輸入網址 http://localhost:5000/greet/Bob，我們將在頁面上看到 “Hello, Bob!”。 在 Flask 中，使用動態路由需要在路由定義中使用 &lt;parameter_name&gt; 語法，指定要傳遞的參數名稱。這個參數可以是任何類型的資料，包括整數、字符串、浮點數等等。在視圖函數中，我們可以使用這個參數來生成不同的內容。 根據網址的文章 id 導向該篇文章下面我們來看一個具體的例子，假設我們有一個博客網站，每一篇文章都有一個獨特的 ID，我們希望通過 URL 顯示不同的文章內容。那麼，我們可以使用以下的路由定義： 1234@app.route('/article/&lt;int:article_id&gt;')def show_article(article_id): # 在這裡使用 article_id 來顯示文章內容 return '這是文章 %d 的內容' % article_id 在上述程式碼中，&lt;int:article_id&gt; 指定了我們要傳遞一個整數類型的參數 article_id。在視圖函數 show_article 中，我們使用了這個參數來顯示文章內容。這個函數只是一個簡單的範例，實際情況中，我們可以從資料庫中獲取文章內容，然後將其呈現在網頁上。 當使用者訪問 /article/123 時，Flask 會自動提取 URL 中的 123，並將其傳遞到 show_article 視圖函數中。因為我們使用了 &lt;int:article_id&gt;，Flask 會自動確認 123 是一個整數類型的資料，並將其轉換成 article_id 參數的值。然後，視圖函數會使用 article_id 來顯示文章內容。 顯示名稱為 username 的使用者資料在 Flask 中，我們可以使用多個動態路由參數，例如： 1234@app.route('/@app.route('/user/&lt;username&gt;/int:user_id')')def show_user(username, user_id): # 在這裡使用 username 和 user_id 來顯示使用者資料 return '使用者名是 %s，ID 是 %d' % (username, user_id) 在這個路由定義中，我們使用了兩個動態路由參數，&lt;username&gt; 和 &lt;int:user_id&gt;。在視圖函數 show_user 中，我們使用了這兩個參數來顯示使用者資料。 動態路由注意事項使用動態路由時需要注意以下幾點： 參數的類型必須指定。在上面的例子中，我們使用 &lt;int:article_id&gt; 和 &lt;username&gt; 指定了參數的類型。 參數名稱必須和視圖函數中的參數名稱相同。 參數的類型轉換是自動進行的，如果轉換失敗，Flask 會返回 404 錯誤頁面。 總而言之，動態路由是 Flask 提供的一個強大的功能，可以讓我們通過 URL 傳遞參數，實現不同的動態內容呈現。通過 &lt;parameter_name&gt; 語法指定參數名稱和類型，在視圖函數中使用參數來生成不同的內容。使用時需要注意參數類型和名稱，以及類型轉換可能出現的錯誤。 透過表單傳遞資料範例程式以下是一個簡單的 Flask 程式，可以處理表單資料： 12345678910111213141516from flask import Flask, render_template, requestapp = Flask(__name__)@app.route('/')def index(): return render_template('index.html')@app.route('/submit', methods=['POST'])def submit(): name = request.form.get('name') age = request.form.get('age') return f'Hello {name}, you are {age} years old!'if __name__ == '__main__': app.run(debug=True) 這個程式定義了兩個路由： /：顯示一個網頁，該網頁包含一個表單，該表單要求使用者輸入姓名和年齡。 /submit：處理提交的表單資料，並顯示一條歡迎消息，包含使用者的姓名和年齡。 這個程式需要一個名為 index.html 的模板文件，該文件定義了表單的 HTML 程式碼。以下是 index.html 的範例程式碼： 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Flask Form Example&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Enter your name and age:&lt;/h1&gt; &lt;form method=&quot;POST&quot; action=&quot;/submit&quot;&gt; &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot;&gt; &lt;br&gt; &lt;label for=&quot;age&quot;&gt;Age:&lt;/label&gt; &lt;input type=&quot;number&quot; name=&quot;age&quot; id=&quot;age&quot;&gt; &lt;br&gt; &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 這個模板文件顯示一個表單，要求使用者輸入姓名和年齡，然後提交表單。表單使用 POST 方法提交到 /submit 路由。 Flask 中的 request.form回頭看 Python 主程式 12345678910111213141516from flask import Flask, render_template, requestapp = Flask(__name__)@app.route('/')def index(): return render_template('index.html')@app.route('/submit', methods=['POST'])def submit(): name = request.form.get('name') age = request.form.get('age') return f'Hello {name}, you are {age} years old!'if __name__ == '__main__': app.run(debug=True) 在 Flask 中，request.form 是一個特殊的 Python 字典，用於處理 POST 方法所傳送的表單資料。當使用者在表單中輸入資料並提交時，POST 請求將表單資料打包在請求主體 (request body) 中，並將其傳送到伺服器。Flask 中的 request 物件可以獲取這些表單資料，request.form 字典會將表單中所有名為 “name” 的欄位值映射到 request.form['name'] 的字典鍵上。 在這段程式碼中，submit() 函數使用 request.form.get() 方法從提交的表單資料中獲取使用者名字和年齡。request.form.get() 方法的作用是從 request.form 字典中獲取指定名稱的值，如果字典中不存在指定名稱的值，則返回 None。例如，name = request.form.get('name') 將會從 POST 請求中獲取名為 “name” 的欄位值，如果不存在這個欄位則返回 None。同理，age = request.form.get('age') 則會從 POST 請求中獲取名為 “age” 的欄位值。最後，這些表單資料可以用來產生回應內容，如 “Hello {name}, you are {age} years old!”。 當使用者提交表單時，Flask 調用 submit 函數處理表單資料。這個函數從 request 對象中獲取 name 和 age 字段的值，然後使用這些值顯示一條歡迎訊息。 請注意，在實際應用中，你應該對提交的資料進行驗證和清理，以防止不良使用者輸入無效資料或惡意資料。你還應該對資料進行適當的安全處理，以保護你的應用免受攻擊。 總結在這個教學中，我們學習了如何在 Flask 中定義路由以及如何處理 URL 參數和表單資料。Flask 為構建 Web 應用程式提供了一個靈活而強大的框架，了解如何定義路由是構建任何 Flask 應用程式的關鍵部分。","link":"/2023/02/16/python-flask/07-dynanic_route_and_forms/"}],"tags":[],"categories":[{"name":"饅頭計畫","slug":"饅頭計畫","link":"/categories/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/"},{"name":"學員心得","slug":"饅頭計畫/學員心得","link":"/categories/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"Flask 教學","slug":"Python/Flask-教學","link":"/categories/Python/Flask-%E6%95%99%E5%AD%B8/"},{"name":"基礎教學","slug":"Python/基礎教學","link":"/categories/Python/%E5%9F%BA%E7%A4%8E%E6%95%99%E5%AD%B8/"}]}
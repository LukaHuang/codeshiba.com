<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【 Flask 教學 】如何在 Flask 設置和操作 Cookie</title>
      <link href="/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/06-flask-cookie-116296aaa947/"/>
      <url>/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/06-flask-cookie-116296aaa947/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/python-flask/06/cover.jpeg"></p><p>在 Python Flask 中，cookie 是一種儲存在使用者瀏覽器中的小型資料塊。通常情況下，我們使用 cookie 來記錄使用者的首選設定、登錄資料以及其他與使用者相關的資訊。在 Flask 應用程式中，使用 cookie 的過程非常簡單。</p><h2 id="設置-cookie"><a href="#設置-cookie" class="headerlink" title="設置 cookie"></a>設置 cookie</h2><p>要在 Flask 中設置 cookie，我們需要使用 response 物件的 <code>set_cookie()</code> 方法。這個方法接受以下參數：</p><ul><li>  <code>key</code>：cookie 的名稱，必須是一個字符串</li><li>  <code>value</code>：cookie 的值，必須是一個字符串，默認為空字符串</li><li>  <code>max_age</code>：cookie 的存活時間，以秒為單位，默認為 None</li></ul><p>以下是一個簡單的 Flask 應用程式，演示如何設置 cookie：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, make_response<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    resp = make_response(<span class="hljs-string">&#x27;Setting a cookie!&#x27;</span>)<br>    resp.set_cookie(<span class="hljs-string">&#x27;my_cookie&#x27;</span>, <span class="hljs-string">&#x27;my_value&#x27;</span>)<br>    <span class="hljs-keyword">return</span> resp<br></code></pre></td></tr></table></figure><p>在上面的程式碼中，我們建立了一個名為 <code>my_cookie</code> 的 cookie，其值為 <code>my_value</code>。當使用者訪問該頁面時，他們的瀏覽器將接收到這個 cookie。</p><h2 id="讀取-cookie"><a href="#讀取-cookie" class="headerlink" title="讀取 cookie"></a>讀取 cookie</h2><p>要讀取 cookie，我們可以使用 request 物件的 <code>cookies</code> 屬性。這個屬性是一個字典，其中包含了所有使用者瀏覽器中的 cookie。以下是一個簡單的 Flask 應用程式，演示如何讀取 cookie：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    my_cookie = request.cookies.get(<span class="hljs-string">&#x27;my_cookie&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;The value of my_cookie is <span class="hljs-subst">&#123;my_cookie&#125;</span>&#x27;</span><br></code></pre></td></tr></table></figure><p>在上面的程式碼中，我們使用 <code>request.cookies.get()</code> 方法讀取名為 <code>my_cookie</code> 的 cookie。如果該 cookie 存在，它的值將被存儲在 <code>my_cookie</code> 變數中。否則，<code>my_cookie</code> 將為 <code>None</code>。</p><h2 id="刪除-cookie"><a href="#刪除-cookie" class="headerlink" title="刪除 cookie"></a>刪除 cookie</h2><p>要刪除 cookie，我們只需要設置 cookie 的 <code>max_age</code> 參數為 0。以下是一個簡單的 Flask 應用程式，演示如何刪除 cookie：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, make_response<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    resp = make_response(<span class="hljs-string">&#x27;Deleting a cookie!&#x27;</span>)<br>    resp.set_cookie(<span class="hljs-string">&#x27;my_cookie&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, max_age=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> resp<br></code></pre></td></tr></table></figure><p>在上面的程式碼中，我們建立了一個名為 <code>my_cookie</code> 的 cookie，並將其 <code>max_age</code> 設置為 0。這意味著該 cookie 的存活時間為 0 秒，瀏覽器將立即刪除它。</p><h2 id="使用-session"><a href="#使用-session" class="headerlink" title="使用 session"></a>使用 session</h2><p>雖然 cookie 是一種非常方便的儲存使用者設置和資料的方式，但是在一些情況下，它們可能不夠安全。為了增強安全性，Flask 提供了一種名為 session 的機制，它會在伺服器端儲存使用者資料，並使用一個加密的 cookie 將使用者資料傳遞給使用者瀏覽器。以下是一個簡單的 Flask 應用程式，演示如何使用 session：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session<br><br>app = Flask(__name__)<br>app.secret_key = <span class="hljs-string">&#x27;my_secret_key&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    session[<span class="hljs-string">&#x27;my_session&#x27;</span>] = <span class="hljs-string">&#x27;my_value&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Setting a session!&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/get_session&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_session</span>():</span><br>    my_session = session.get(<span class="hljs-string">&#x27;my_session&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;The value of my_session is <span class="hljs-subst">&#123;my_session&#125;</span>&#x27;</span><br></code></pre></td></tr></table></figure><p>在上面的程式碼中，我們使用 <code>session</code> 物件儲存使用者資料。在設置 session 時，我們可以像設置字典一樣設置 session 的鍵和值。在讀取 session 時，我們使用 <code>session.get()</code> 方法。需要注意的是，使用 session 時需要設置 <code>app.secret_key</code> 屬性，該屬性是用於加密 session 的關鍵。</p><h1 id="使用情境"><a href="#使用情境" class="headerlink" title="使用情境"></a>使用情境</h1><p>以下是使用 Python Flask 框架來實現一些使用 Cookie 的範例：</p><h2 id="使用者身份驗證"><a href="#使用者身份驗證" class="headerlink" title="使用者身份驗證"></a>使用者身份驗證</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, make_response<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    resp = make_response(<span class="hljs-string">&#x27;Welcome!&#x27;</span>)<br>    resp.set_cookie(<span class="hljs-string">&#x27;user_id&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>)<br>    <span class="hljs-keyword">return</span> resp<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/dashboard&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dashboard</span>():</span><br>    user_id = request.cookies.get(<span class="hljs-string">&#x27;user_id&#x27;</span>)<br>    <span class="hljs-keyword">if</span> user_id == <span class="hljs-string">&#x27;123&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Dashboard&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Unauthorized&#x27;</span><br></code></pre></td></tr></table></figure><p>在上面的程式碼中，當使用者訪問首頁時，我們設置了一個名為 <code>user_id</code> 的 cookie，其值為 <code>123</code>。當使用者訪問儀表板頁面時，我們讀取了 <code>user_id</code> cookie 的值，並檢查其是否等於 <code>123</code>。如果相等，則返回儀表板頁面，否則返回未經授權的錯誤。</p><h2 id="記住使用者首選設置"><a href="#記住使用者首選設置" class="headerlink" title="記住使用者首選設置"></a>記住使用者首選設置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, make_response<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    lang = request.cookies.get(<span class="hljs-string">&#x27;lang&#x27;</span>, <span class="hljs-string">&#x27;en&#x27;</span>)<br>    resp = make_response(<span class="hljs-string">f&#x27;Language: <span class="hljs-subst">&#123;lang&#125;</span>&#x27;</span>)<br>    resp.set_cookie(<span class="hljs-string">&#x27;lang&#x27;</span>, lang)<br>    <span class="hljs-keyword">return</span> resp<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/set_lang/&lt;lang&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_lang</span>(<span class="hljs-params">lang</span>):</span><br>    resp = make_response(<span class="hljs-string">&#x27;Language set!&#x27;</span>)<br>    resp.set_cookie(<span class="hljs-string">&#x27;lang&#x27;</span>, lang)<br>    <span class="hljs-keyword">return</span> resp<br></code></pre></td></tr></table></figure><p>在上面的程式碼中，我們讀取了名為 <code>lang</code> 的 cookie 的值，並將其用作網站的語言。如果 cookie 不存在，我們默認使用英語。當使用者訪問網站時，我們將 <code>lang</code> cookie 的值設置為當前語言。如果使用者訪問 <code>/set_lang/&lt;lang&gt;</code> 頁面，我們將 <code>lang</code> cookie 的值設置為使用者指定的語言。</p><h2 id="記住使用者在線狀態"><a href="#記住使用者在線狀態" class="headerlink" title="記住使用者在線狀態"></a>記住使用者在線狀態</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, make_response<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    resp = make_response(<span class="hljs-string">&#x27;Welcome!&#x27;</span>)<br>    resp.set_cookie(<span class="hljs-string">&#x27;online&#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>)<br>    <span class="hljs-keyword">return</span> resp<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logout</span>():</span><br>    resp = make_response(<span class="hljs-string">&#x27;Logged out!&#x27;</span>)<br>    resp.set_cookie(<span class="hljs-string">&#x27;online&#x27;</span>, <span class="hljs-string">&#x27;false&#x27;</span>)<br>    <span class="hljs-keyword">return</span> resp<br></code></pre></td></tr></table></figure><p>在上面的程式碼中，當使用者訪問首頁時，我們設置了一個名為 <code>online</code> 的 cookie，其值為 <code>true</code>，表示使用者在線。當使用者訪問登出頁面時，我們將 <code>online</code> cookie 的值設置為 <code>false</code>，表示使用者離線。</p><h2 id="記住使用者的購物車"><a href="#記住使用者的購物車" class="headerlink" title="記住使用者的購物車"></a>記住使用者的購物車</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, make_response<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    resp = make_response(<span class="hljs-string">&#x27;Welcome to our store!&#x27;</span>)<br>    resp.set_cookie(<span class="hljs-string">&#x27;cart&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> resp<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/add_to_cart/&lt;item&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_to_cart</span>(<span class="hljs-params">item</span>):</span><br>    cart = request.cookies.get(<span class="hljs-string">&#x27;cart&#x27;</span>)<br>    <span class="hljs-keyword">if</span> cart:<br>        cart += <span class="hljs-string">f&#x27;,<span class="hljs-subst">&#123;item&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        cart = item<br>    resp = make_response(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;item&#125;</span> added to cart!&#x27;</span>)<br>    resp.set_cookie(<span class="hljs-string">&#x27;cart&#x27;</span>, cart)<br>    <span class="hljs-keyword">return</span> resp<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/view_cart&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">view_cart</span>():</span><br>    cart = request.cookies.get(<span class="hljs-string">&#x27;cart&#x27;</span>)<br>    <span class="hljs-keyword">if</span> cart:<br>        items = cart.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Items in your cart: <span class="hljs-subst">&#123;<span class="hljs-string">&quot;, &quot;</span>.join(items)&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Your cart is empty&#x27;</span><br></code></pre></td></tr></table></figure><p>在上面的程式碼中，當使用者訪問首頁時，我們設置了一個名為 <code>cart</code> 的 cookie，其值為空，表示使用者的購物車是空的。當使用者訪問添加到購物車頁面時，我們讀取 <code>cart</code> cookie 的值，將新的項目添加到購物車中，然後更新 <code>cart</code> cookie 的值。當使用者訪問查看購物車頁面時，我們讀取 <code>cart</code> cookie 的值，並顯示購物車中的所有項目。</p><h2 id="記住使用者的瀏覽歷史"><a href="#記住使用者的瀏覽歷史" class="headerlink" title="記住使用者的瀏覽歷史"></a>記住使用者的瀏覽歷史</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, make_response<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    resp = make_response(<span class="hljs-string">&#x27;Welcome to our store!&#x27;</span>)<br>    resp.set_cookie(<span class="hljs-string">&#x27;history&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> resp<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/view_product/&lt;product&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">view_product</span>(<span class="hljs-params">product</span>):</span><br>    history = request.cookies.get(<span class="hljs-string">&#x27;history&#x27;</span>)<br>    <span class="hljs-keyword">if</span> history:<br>        products = history.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>        <span class="hljs-keyword">if</span> product <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> products:<br>            history += <span class="hljs-string">f&#x27;,<span class="hljs-subst">&#123;product&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        history = product<br>    resp = make_response(<span class="hljs-string">f&#x27;Viewing product: <span class="hljs-subst">&#123;product&#125;</span>&#x27;</span>)<br>    resp.set_cookie(<span class="hljs-string">&#x27;history&#x27;</span>, history)<br>    <span class="hljs-keyword">return</span> resp<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/view_history&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">view_history</span>():</span><br>    history = request.cookies.get(<span class="hljs-string">&#x27;history&#x27;</span>)<br>    <span class="hljs-keyword">if</span> history:<br>        products = history.split<br></code></pre></td></tr></table></figure><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>在 Flask 中，使用 cookie 是一種非常簡單和方便的方式，可以儲存使用者設置和資料。在上面的教學中，我們學習了如何設置、讀取和刪除 cookie，以及如何使用 session 增強安全性。通過這些方法，我們可以更加靈活地設計 Flask 應用程式，以滿足不同的需求。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ol><li><p> <a href="https://overiq.com/flask-101/cookies-in-flask/">OverIQ</a>：簡單介紹 Flask 中如何使用 <code>set_cookie()</code> 方法設置 cookie。</p></li><li><p><a href="https://www.geeksforgeeks.org/flask-cookies/">GeeksforGeeks</a>：提供 Flask cookie 的概述，並介紹如何設置和讀取 cookie。</p></li><li><p><a href="https://flask.palletsprojects.com/en/2.2.x/quickstart/">Flask documentation</a>：官方 Flask 文件，提供全面的關於 cookie 的指南，包括如何設置、讀取、刪除 cookie，以及使用 session。</p></li><li><p><a href="https://pythonbasics.org/flask-cookies/">Python Basics</a>：簡單介紹在 Flask 中如何使用 <code>make_response()</code> 函數和 <code>set_cookie()</code> 方法來設置 cookie。</p></li><li><p><a href="https://stackoverflow.com/questions/46661083/how-to-set-cookie-in-flask">Stack Overflow</a>：Stack Overflow 討論串，討論了在 Flask 中設置 cookie 會面臨的問題以及如何解決。</p></li><li><p> <a href="http://protutorialplus.com/flask-cookies">Protutorialplus</a>：提供了如何在 Python Flask 中設置和讀取 cookie 的簡單教學。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask 教學 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【 Flask 教學 】 透過 URL 傳遞參數與透過表單傳遞</title>
      <link href="/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/07-dynanic_route_and_forms-0e0c0f3ceb32/"/>
      <url>/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/07-dynanic_route_and_forms-0e0c0f3ceb32/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/python-flask/07/cover.jpeg"></p><h1 id="通過-URL-傳遞參數"><a href="#通過-URL-傳遞參數" class="headerlink" title="通過 URL 傳遞參數"></a>通過 URL 傳遞參數</h1><h2 id="嗨，動態路由你好！"><a href="#嗨，動態路由你好！" class="headerlink" title="嗨，動態路由你好！"></a>嗨，動態路由你好！</h2><p>Flask 是一個輕量級的 Web 框架，提供了簡單易用的路由定義和視圖函數。其中一個優勢是通過 URL 傳遞參數的能力，也就是動態路由。在這個路由方式下，URL 中的一部分可以作為參數傳遞到視圖函數中，從而實現不同的動態內容呈現。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/greet/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet</span>(<span class="hljs-params">name</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Hello, <span class="hljs-subst">&#123;name&#125;</span>!&#x27;</span><br></code></pre></td></tr></table></figure><p>此路由接受 URL 中的 <code>name</code> 參數，我們可以通過 <code>name</code> 參數在函數中訪問它。例如，如果我們輸入網址 <code>http://localhost:5000/greet/Bob</code>，我們將在頁面上看到 “Hello, Bob!”。</p><p>在 Flask 中，使用動態路由需要在路由定義中使用 <code>&lt;parameter_name&gt;</code> 語法，指定要傳遞的參數名稱。這個參數可以是任何類型的資料，包括整數、字符串、浮點數等等。在視圖函數中，我們可以使用這個參數來生成不同的內容。</p><h2 id="根據網址的文章-id-導向該篇文章"><a href="#根據網址的文章-id-導向該篇文章" class="headerlink" title="根據網址的文章 id 導向該篇文章"></a>根據網址的文章 id 導向該篇文章</h2><p>下面我們來看一個具體的例子，假設我們有一個博客網站，每一篇文章都有一個獨特的 ID，我們希望通過 URL 顯示不同的文章內容。那麼，我們可以使用以下的路由定義：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/article/&lt;int:article_id&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_article</span>(<span class="hljs-params">article_id</span>):</span><br>    <span class="hljs-comment"># 在這裡使用 article_id 來顯示文章內容</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;這是文章 %d 的內容&#x27;</span> % article_id<br></code></pre></td></tr></table></figure><p>在上述程式碼中，<code>&lt;int:article_id&gt;</code> 指定了我們要傳遞一個整數類型的參數 <code>article_id</code>。在視圖函數 <code>show_article</code> 中，我們使用了這個參數來顯示文章內容。這個函數只是一個簡單的範例，實際情況中，我們可以從資料庫中獲取文章內容，然後將其呈現在網頁上。</p><p>當使用者訪問 <code>/article/123</code> 時，Flask 會自動提取 URL 中的 <code>123</code>，並將其傳遞到 <code>show_article</code> 視圖函數中。因為我們使用了 <code>&lt;int:article_id&gt;</code>，Flask 會自動確認 <code>123</code> 是一個整數類型的資料，並將其轉換成 <code>article_id</code> 參數的值。然後，視圖函數會使用 <code>article_id</code> 來顯示文章內容。</p><h2 id="顯示名稱為-username-的使用者資料"><a href="#顯示名稱為-username-的使用者資料" class="headerlink" title="顯示名稱為 username 的使用者資料"></a>顯示名稱為 username 的使用者資料</h2><p>在 Flask 中，我們可以使用多個動態路由參數，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/@app.route(&#x27;</span>/user/&lt;username&gt;/<span class="hljs-built_in">int</span>:user_id<span class="hljs-string">&#x27;)&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_user</span>(<span class="hljs-params">username, user_id</span>):</span><br>  <span class="hljs-comment"># 在這裡使用 username 和 user_id 來顯示使用者資料</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;使用者名是 %s，ID 是 %d&#x27;</span> % (username, user_id)<br></code></pre></td></tr></table></figure><p>在這個路由定義中，我們使用了兩個動態路由參數，<code>&lt;username&gt;</code> 和 <code>&lt;int:user_id&gt;</code>。在視圖函數 <code>show_user</code> 中，我們使用了這兩個參數來顯示使用者資料。</p><h2 id="動態路由注意事項"><a href="#動態路由注意事項" class="headerlink" title="動態路由注意事項"></a>動態路由注意事項</h2><p>使用動態路由時需要注意以下幾點：</p><ol><li>參數的類型必須指定。在上面的例子中，我們使用 <code>&lt;int:article_id&gt;</code> 和 <code>&lt;username&gt;</code> 指定了參數的類型。</li><li>參數名稱必須和視圖函數中的參數名稱相同。</li><li>參數的類型轉換是自動進行的，如果轉換失敗，Flask 會返回 404 錯誤頁面。</li></ol><p>總而言之，動態路由是 Flask 提供的一個強大的功能，可以讓我們通過 URL 傳遞參數，實現不同的動態內容呈現。通過 <code>&lt;parameter_name&gt;</code> 語法指定參數名稱和類型，在視圖函數中使用參數來生成不同的內容。使用時需要注意參數類型和名稱，以及類型轉換可能出現的錯誤。</p><h1 id="透過表單傳遞資料"><a href="#透過表單傳遞資料" class="headerlink" title="透過表單傳遞資料"></a>透過表單傳遞資料</h1><h2 id="範例程式"><a href="#範例程式" class="headerlink" title="範例程式"></a>範例程式</h2><p>以下是一個簡單的 Flask 程式，可以處理表單資料：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/submit&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">submit</span>():</span><br>    name = request.form.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    age = request.form.get(<span class="hljs-string">&#x27;age&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Hello <span class="hljs-subst">&#123;name&#125;</span>, you are <span class="hljs-subst">&#123;age&#125;</span> years old!&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>這個程式定義了兩個路由：</p><ul><li><code>/</code>：顯示一個網頁，該網頁包含一個表單，該表單要求使用者輸入姓名和年齡。</li><li><code>/submit</code>：處理提交的表單資料，並顯示一條歡迎消息，包含使用者的姓名和年齡。</li></ul><p>這個程式需要一個名為 <code>index.html</code> 的模板文件，該文件定義了表單的 HTML 程式碼。以下是 <code>index.html</code> 的範例程式碼：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Flask Form Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Enter your name and age:<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/submit&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span>Age:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>這個模板文件顯示一個表單，要求使用者輸入姓名和年齡，然後提交表單。表單使用 POST 方法提交到 <code>/submit</code> 路由。</p><h2 id="Flask-中的-request-form"><a href="#Flask-中的-request-form" class="headerlink" title="Flask 中的 request.form"></a>Flask 中的 request.form</h2><p>回頭看 Python 主程式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/submit&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">submit</span>():</span><br>    name = request.form.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    age = request.form.get(<span class="hljs-string">&#x27;age&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Hello <span class="hljs-subst">&#123;name&#125;</span>, you are <span class="hljs-subst">&#123;age&#125;</span> years old!&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>在 Flask 中，<code>request.form</code> 是一個特殊的 Python 字典，用於處理 POST 方法所傳送的表單資料。當使用者在表單中輸入資料並提交時，POST 請求將表單資料打包在請求主體 (<code>request body</code>) 中，並將其傳送到伺服器。Flask 中的 <code>request</code> 物件可以獲取這些表單資料，<code>request.form</code> 字典會將表單中所有名為 “name” 的欄位值映射到 <code>request.form[&#39;name&#39;]</code> 的字典鍵上。</p><p>在這段程式碼中，<code>submit()</code> 函數使用 <code>request.form.get()</code> 方法從提交的表單資料中獲取使用者名字和年齡。<code>request.form.get()</code> 方法的作用是從 <code>request.form</code> 字典中獲取指定名稱的值，如果字典中不存在指定名稱的值，則返回 <code>None</code>。例如，<code>name = request.form.get(&#39;name&#39;)</code> 將會從 POST 請求中獲取名為 “name” 的欄位值，如果不存在這個欄位則返回 <code>None</code>。同理，<code>age = request.form.get(&#39;age&#39;)</code> 則會從 POST 請求中獲取名為 “age” 的欄位值。最後，這些表單資料可以用來產生回應內容，如 “Hello {name}, you are {age} years old!”。</p><p>當使用者提交表單時，Flask 調用 <code>submit</code> 函數處理表單資料。這個函數從 <code>request</code> 對象中獲取 <code>name</code> 和 <code>age</code> 字段的值，然後使用這些值顯示一條歡迎訊息。</p><p>請注意，在實際應用中，你應該對提交的資料進行驗證和清理，以防止不良使用者輸入無效資料或惡意資料。你還應該對資料進行適當的安全處理，以保護你的應用免受攻擊。</p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>在這個教學中，我們學習了如何在 Flask 中定義路由以及如何處理 URL 參數和表單資料。Flask 為構建 Web 應用程式提供了一個靈活而強大的框架，了解如何定義路由是構建任何 Flask 應用程式的關鍵部分。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask 教學 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【 Flask 教學 】用 Flask Blueprint 組織程式碼</title>
      <link href="/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/05-flask-blueprint-fe613c4944ef/"/>
      <url>/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/05-flask-blueprint-fe613c4944ef/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/python-flask/05/cover.jpeg"></p><h1 id="Flask-Blueprint-組織程式碼的幾種方式"><a href="#Flask-Blueprint-組織程式碼的幾種方式" class="headerlink" title="Flask Blueprint 組織程式碼的幾種方式"></a>Flask Blueprint 組織程式碼的幾種方式</h1><p>Blueprint 是一個用於標示架構和組織軟體專案的概念。在這裡，我們將探討三種不同的專案組織方式：單一應用程式、模組化應用程式，以及使用 Flask Blueprint 的應用程式。以下是這三種組織方式的程式範例：</p><h2 id="按功能劃分藍圖"><a href="#按功能劃分藍圖" class="headerlink" title="按功能劃分藍圖"></a>按功能劃分藍圖</h2><p>在這種組織方式中，我們根據應用程式的功能劃分藍圖。這個範例包含了一個簡單的 Flask 應用程式，使用了按功能劃分的 Blueprint 組織方式。應用程式有兩個功能模塊：身份驗證（auth）和文章（posts）。每個模塊都有自己的視圖和模板。在 app.py 中，我們註冊了兩個藍圖：auth_blueprint 和 posts_blueprint。</p><p>目錄結構：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">myproject/<br>    ├── auth/<br>    │   ├── __init__.py<br>    │   ├── views.py<br>    ├── posts/<br>    │   ├── __init__.py<br>    │   ├── views.py<br>    ├── templates/<br>    │   ├── auth/<br>    │   │   ├── login.html<br>    │   ├── posts/<br>    │   │   ├── list.html<br>    └── app.py<br></code></pre></td></tr></table></figure><p>app.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> auth.views <span class="hljs-keyword">import</span> auth_blueprint<br><span class="hljs-keyword">from</span> posts.views <span class="hljs-keyword">import</span> posts_blueprint<br><br>app = Flask(__name__)<br>app.register_blueprint(auth_blueprint)<br>app.register_blueprint(posts_blueprint)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><p>auth/<strong>init</strong>.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 空文件</span><br></code></pre></td></tr></table></figure><p>auth/views.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint, render_template<br><br>auth_blueprint = Blueprint(<span class="hljs-string">&#x27;auth&#x27;</span>, __name__, template_folder=<span class="hljs-string">&#x27;templates/auth&#x27;</span>)<br><br><span class="hljs-meta">@auth_blueprint.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;auth/login.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p>templates/auth/login.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Login Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>posts/<strong>init</strong>.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 空文件</span><br></code></pre></td></tr></table></figure><p>posts/views.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint, render_template<br><br>posts_blueprint = Blueprint(<span class="hljs-string">&#x27;posts&#x27;</span>, __name__, template_folder=<span class="hljs-string">&#x27;templates/posts&#x27;</span>)<br><br><span class="hljs-meta">@posts_blueprint.route(<span class="hljs-params"><span class="hljs-string">&#x27;/posts&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">list_posts</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;posts/list.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p>templates/posts/list.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Posts<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Posts List<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="按角色劃分藍圖"><a href="#按角色劃分藍圖" class="headerlink" title="按角色劃分藍圖"></a>按角色劃分藍圖</h2><p>在這種組織方式中，我們根據不同的使用者角色（如管理員、使用者…等）劃分藍圖。這樣可以讓應用程式的不同角色有各自的功能界面和邏輯。以下是按角色劃分 Blueprint 的簡單範例：</p><p>目錄結構：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">myproject<span class="hljs-operator">/</span><br>    ├── admin<span class="hljs-operator">/</span><br>    │   ├── __init__.py<br>    │   ├── views.py<br>    ├── <span class="hljs-keyword">user</span><span class="hljs-operator">/</span><br>    │   ├── __init__.py<br>    │   ├── views.py<br>    ├── templates<span class="hljs-operator">/</span><br>    │   ├── admin<span class="hljs-operator">/</span><br>    │   │   ├── dashboard.html<br>    │   ├── <span class="hljs-keyword">user</span><span class="hljs-operator">/</span><br>    │   │   ├── profile.html<br>    └── app.py<br></code></pre></td></tr></table></figure><p>app.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> admin.views <span class="hljs-keyword">import</span> admin_blueprint<br><span class="hljs-keyword">from</span> user.views <span class="hljs-keyword">import</span> user_blueprint<br><br>app = Flask(__name__)<br>app.register_blueprint(admin_blueprint, url_prefix=<span class="hljs-string">&#x27;/admin&#x27;</span>)<br>app.register_blueprint(user_blueprint, url_prefix=<span class="hljs-string">&#x27;/user&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><p>admin/<strong>init</strong>.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 空文件</span><br></code></pre></td></tr></table></figure><p>admin/views.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint, render_template<br><br>admin_blueprint = Blueprint(<span class="hljs-string">&#x27;admin&#x27;</span>, __name__, template_folder=<span class="hljs-string">&#x27;templates/admin&#x27;</span>)<br><br><span class="hljs-meta">@admin_blueprint.route(<span class="hljs-params"><span class="hljs-string">&#x27;/dashboard&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dashboard</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;admin/dashboard.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p>templates/admin/dashboard.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Admin Dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Admin Dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>user/<strong>init</strong>.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 空文件</span><br></code></pre></td></tr></table></figure><p>user/views.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint, render_template<br><br>user_blueprint = Blueprint(<span class="hljs-string">&#x27;user&#x27;</span>, __name__, template_folder=<span class="hljs-string">&#x27;templates/user&#x27;</span>)<br><br><span class="hljs-meta">@user_blueprint.route(<span class="hljs-params"><span class="hljs-string">&#x27;/profile&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">profile</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;user/profile.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p>templates/user/profile.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>User Profile<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>User Profile<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第一個範例按照角色劃分，有 admin 和 user 兩個角色，每個角色有對應的視圖和模板。<br>這些範例分別展示了按角色劃分和按資源劃分的兩種 Flask Blueprint 組織方式。</p><h2 id="按資源類型劃分藍圖："><a href="#按資源類型劃分藍圖：" class="headerlink" title="按資源類型劃分藍圖："></a>按資源類型劃分藍圖：</h2><p>在這種組織方式中，我們根據應用程式中的資源類型（如文章、評論等）劃分藍圖。這樣可以讓程式碼更具模組化，便於維護和擴展。在 app.py 中，我們註冊了相應的藍圖。</p><p>目錄結構：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">myproject/<br>    ├── posts/<br>    │   ├── __init__.py<br>    │   ├── views.py<br>    ├── comments/<br>    │   ├── __init__.py<br>    │   ├── views.py<br>    ├── templates/<br>    │   ├── posts/<br>    │   │   ├── list.html<br>    │   ├── comments/<br>    │   │   ├── list.html<br>    └── app.py<br></code></pre></td></tr></table></figure><p>app.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> posts.views <span class="hljs-keyword">import</span> posts_blueprint<br><span class="hljs-keyword">from</span> comments.views <span class="hljs-keyword">import</span> comments_blueprint<br><br>app = Flask(__name__)<br>app.register_blueprint(posts_blueprint, url_prefix=<span class="hljs-string">&#x27;/posts&#x27;</span>)<br>app.register_blueprint(comments_blueprint, url_prefix=<span class="hljs-string">&#x27;/comments&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><p>posts/<strong>init</strong>.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 空文件</span><br></code></pre></td></tr></table></figure><p>posts/views.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint, render_template<br><br>posts_blueprint = Blueprint(<span class="hljs-string">&#x27;posts&#x27;</span>, __name__, template_folder=<span class="hljs-string">&#x27;templates/posts&#x27;</span>)<br><br><span class="hljs-meta">@posts_blueprint.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">list_posts</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;posts/list.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p>templates/posts/list.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Posts<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Posts List<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>comments/<strong>init</strong>.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 空文件</span><br></code></pre></td></tr></table></figure><p>comments/views.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint, render_template<br><br>comments_blueprint = Blueprint(<span class="hljs-string">&#x27;comments&#x27;</span>, __name__, template_folder=<span class="hljs-string">&#x27;templates/comments&#x27;</span>)<br><br><span class="hljs-meta">@comments_blueprint.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">list_comments</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;comments/list.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p>templates/comments/list.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Comments<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Comments List<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="比較三種方案"><a href="#比較三種方案" class="headerlink" title="比較三種方案"></a>比較三種方案</h1><p>下表對比了使用 Flask Blueprint 組織程式碼的三種方式的優缺點：</p><table><thead><tr><th>方式</th><th>優點</th><th>缺點</th></tr></thead><tbody><tr><td>按功能劃分藍圖</td><td>功能模塊清晰</td><td>功能模塊過多時結構可能變得複雜</td></tr><tr><td></td><td>有利於專案的擴展性和可維護性</td><td></td></tr><tr><td>按角色劃分藍圖</td><td>便於實現角色之間的隔離和權限控制</td><td>角色之間存在相似功能時可能導致程式碼重複</td></tr><tr><td></td><td>有利於專案的擴展性和可維護性</td><td></td></tr><tr><td>按資源類型劃分藍圖</td><td>程式碼具有高度模組化</td><td>資源之間有相互依賴時可能需要更多的協調和溝通</td></tr><tr><td></td><td>便於維護和擴展</td><td></td></tr></tbody></table><p>在選擇組織方式時，應該根據專案的需求和規模來決定。有時候，可以將這些組織方式結合使用，以便更好地滿足專案需求。</p><h1 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h1><p>綜合以上三種使用 Flask Blueprint 的程式碼組織方式，開發者可以根據專案需求靈活選擇或混合應用。在實際應用中，專案可能需要更細緻的組織結構，此時可以將多種組織方式結合起來，以便更好地滿足需求。</p><p>例如，我們可以根據應用程式的功能和資源類型同時劃分藍圖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">myproject/<br>    ├── auth/<br>    │   ├── __init__.py<br>    │   ├── views.py<br>    ├── admin/<br>    │   ├── posts/<br>    │   │   ├── __init__.py<br>    │   │   ├── views.py<br>    │   ├── images/<br>    │   │   ├── __init__.py<br>    │   │   ├── views.py<br>    ├── user/<br>    │   ├── posts/<br>    │   │   ├── __init__.py<br>    │   │   ├── views.py<br>    │   ├── comments/<br>    │   │   ├── __init__.py<br>    │   │   ├── views.py<br>    ├── templates/<br>    │   ├── auth/<br>    │   │   ├── login.html<br>    │   │   ├── register.html<br>    │   ├── admin/<br>    │   │   ├── posts/<br>    │   │   │   ├── manage_posts.html<br>    │   │   ├── images/<br>    │   │   │   ├── manage_images.html<br>    │   ├── user/<br>    │   │   ├── posts/<br>    │   │   │   ├── list.html<br>    │   │   │   ├── detail.html<br>    │   │   ├── comments/<br>    │   │   │   ├── list.html<br>    │   │   │   ├── new_comment.html<br>    └── app.py<br></code></pre></td></tr></table></figure><p>在這個範例中，我們同時根據功能（身份驗證、管理員、使用者）和資源類型（文章、圖片、評論）劃分藍圖。這樣可以使程式碼更具模組化，便於維護和擴展。同時，不同角色的功能和權限也得到了清晰的區分。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask 教學 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【 Flask 教學 】Flask Factory 介紹</title>
      <link href="/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/04-flask-factory-143c24814535/"/>
      <url>/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/04-flask-factory-143c24814535/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/python-flask/04/cover.jpeg"></p><p>Flask 是一個輕量的 Python 網頁應用框架，因為它簡單易用而廣受歡迎。其中，Flask Factory 是一個新的概念，可以更加靈活地建立 Flask 應用程式。本文將介紹 Flask Factory 的概念以及如何在 Flask 應用程式中使用它。</p><h3 id="Flask-Factory-是什麼？"><a href="#Flask-Factory-是什麼？" class="headerlink" title="Flask Factory 是什麼？"></a>Flask Factory 是什麼？</h3><p>在傳統的 Flask 應用程式中，我們會在一個檔案中建立 Flask 應用程式物件，然後將它與路由和視圖函式一起定義在同一個檔案中。然而，這種方式的維護和擴展性很差。Flask Factory 的概念就是將 Flask 應用程式物件的建立和設定分離出來，以便更靈活地管理 Flask 應用程式。</p><p>Flask Factory 通常會分為三個部分：</p><ol><li>工廠函式：這是建立 Flask 應用程式物件的函式，通常是一個叫做 <code>create_app</code> 的函式。這個函式會負責建立 Flask 應用程式物件、設定 Flask 應用程式以及註冊路由和視圖函式。</li><li>設定：這是 Flask 應用程式的設定，可以使用 Python Class 或字典來定義。</li><li>視圖函式：這些是處理路由的函式，通常是一個或多個藍圖。</li></ol><h3 id="如何在-Flask-中使用工廠？"><a href="#如何在-Flask-中使用工廠？" class="headerlink" title="如何在 Flask 中使用工廠？"></a>如何在 Flask 中使用工廠？</h3><p>以下是一個簡單的 <code>create_app</code> 工廠函式範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_app</span>():</span><br>    app = Flask(__name__)<br>    app.config[<span class="hljs-string">&#x27;DEBUG&#x27;</span>] = <span class="hljs-literal">True</span><br><br><span class="hljs-meta">    @app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_world</span>():</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, World!&#x27;</span><br><br>    <span class="hljs-keyword">return</span> app<br></code></pre></td></tr></table></figure><p>在上面的範例中，<code>create_app</code> 函式建立了一個 Flask 應用程式物件，並定義了一個路由和一個視圖函式。此外，它還設定了 <code>DEBUG</code> 設定選項，以便在偵錯模式下執行應用程式。</p><p>這個工廠函式可以在另一個檔案中被呼叫，並使用以下程式碼啟動應用程式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> myapp <span class="hljs-keyword">import</span> create_app<br><br>app = create_app()<br>app.run()<br></code></pre></td></tr></table></figure><p>在上面的範例中，<code>create_app</code> 函式在另一個名為 <code>myapp</code> 的模組中定義，然後被呼叫以建立 Flask 應用程式物件。然後，<code>run</code> 方法啟動了應用程式。</p><p>除了上面的範例，我們還可以使用工廠函式來建立複雜的 Flask 應用程式。例如，我們可以使用藍圖來組織視圖函式，使用 Flask 插件來擴展應用程式功能，等等。</p><p>以下是一個更複雜的工廠函式範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> myapp.views <span class="hljs-keyword">import</span> main_bp, admin_bp<br><span class="hljs-keyword">from</span> myapp.extensions <span class="hljs-keyword">import</span> db, login_manager<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_app</span>(<span class="hljs-params">config_object</span>):</span><br>    app = Flask(__name__)<br>    app.config.from_object(config_object)<br><br>    db.init_app(app)<br>    login_manager.init_app(app)<br><br>    app.register_blueprint(main_bp)<br>    app.register_blueprint(admin_bp, url_prefix=<span class="hljs-string">&#x27;/admin&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> app<br></code></pre></td></tr></table></figure><p>在上面的範例中，<code>create_app</code> 函式建立了一個 Flask 應用程式物件，並使用 <code>config_object</code> 設定來設定應用程式。它還初始化了一些 Flask 插件，如 <code>db</code> 和 <code>login_manager</code>，並將它們與應用程式關聯起來。最後，它註冊了兩個藍圖 <code>main_bp</code> 和 <code>admin_bp</code>，這些藍圖包含不同的視圖函式。</p><p>這個工廠函式可以在另一個檔案中被呼叫，並使用以下程式碼啟動應用程式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> myapp <span class="hljs-keyword">import</span> create_app<br><span class="hljs-keyword">from</span> myapp.config <span class="hljs-keyword">import</span> ProductionConfig<br><br>app = create_app(ProductionConfig)<br>app.run()<br></code></pre></td></tr></table></figure><p>在上面的範例中，<code>create_app</code> 函式在 <code>myapp</code> 模組中定義，然後使用 <code>ProductionConfig</code> 設定物件建立 Flask 應用程式物件。然後，<code>run</code> 方法啟動了應用程式。</p><p>總結一下，Flask Factory 是一個有用的概念，可以使我們更加靈活地建立和管理 Flask 應用程式。通過將建立 Flask 應用程式物件的過程分離出來，我們可以更輕鬆地進行擴展和維護。如果你還沒有嘗試過 Flask Factory，我們建議你嘗試一下，體驗一下其帶來的好處。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask 教學 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【 Flask 教學 】Flask SQLAlchemy | Python 與資料庫的橋樑</title>
      <link href="/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/03-relational-database-7e6315178894/"/>
      <url>/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/03-relational-database-7e6315178894/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/python-flask/03/cover.jpeg"></p><p>在本篇文章，我們將介紹 Flask-SQLAlchemy，讓我們能夠在 Python Flask 應用程式中使用 SQLAlchemy 的 ORM 和 Flask-SQLAlchemy 進行資料庫溝通。</p><p>Flask 是一個輕量級的 Python Web 框架，用於建立 Web 應用程式，而 SQLAlchemy 則是一個 Python 庫，提供對關係資料庫的高效和高效能的訪問。</p><p>Flask-SQLAlchemy 是一個用於 Flask 應用程式的擴展程式，簡化了使用 SQLAlchemy 的複雜性，並提供了常見的對象和模式，例如與每個 Web 請求相關聯的會話、模型和引擎，同時不會更改 SQLAlchemy 的工作方式。</p><p>下面我們來看看如何在 Python Flask 應用程式中使用 Flask-SQLAlchemy。</p><h2 id="安裝-Flask-SQLAlchemy"><a href="#安裝-Flask-SQLAlchemy" class="headerlink" title="安裝 Flask-SQLAlchemy"></a>安裝 Flask-SQLAlchemy</h2><p>要使用 Flask-SQLAlchemy，首先需要在計算機上安裝它。可以使用以下命令在終端中安裝 Flask-SQLAlchemy：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">pip install Flask-SQLAlchemy<br></code></pre></td></tr></table></figure><h2 id="建立-Flask-應用程式"><a href="#建立-Flask-應用程式" class="headerlink" title="建立 Flask 應用程式"></a>建立 Flask 應用程式</h2><hr><p>在使用 Flask-SQLAlchemy 之前，需要建立一個 Flask 應用程式。可以使用以下程式碼建立一個簡單的 Flask 應用程式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br>app = Flask(__name__)<br></code></pre></td></tr></table></figure><h2 id="設定資料庫"><a href="#設定資料庫" class="headerlink" title="設定資料庫"></a>設定資料庫</h2><hr><p>在 Flask-SQLAlchemy 中，可以使用 PostgreSQL、MySQL、SQLite 或 Oracle 等多種資料庫。在本節中，我們將使用 SQLite3 作為資料庫。可以使用以下程式碼設定資料庫：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask_sqlalchemy <span class="hljs-keyword">import</span> SQLAlchemy<br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="hljs-string">&#x27;sqlite:///example.db&#x27;</span><br>db = SQLAlchemy(app)<br></code></pre></td></tr></table></figure><p>上述程式碼將建立一個名為 example.db 的 SQLite3 資料庫。</p><h2 id="建立資料庫模型"><a href="#建立資料庫模型" class="headerlink" title="建立資料庫模型"></a>建立資料庫模型</h2><p>在 Flask-SQLAlchemy 中，資料庫模型由 Python Class定義。以下是一個簡單的範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>(<span class="hljs-params">db.Model</span>):</span><br>    <span class="hljs-built_in">id</span> = db.Column(db.Integer, primary_key=<span class="hljs-literal">True</span>)<br>    name = db.Column(db.String(<span class="hljs-number">80</span>), nullable=<span class="hljs-literal">False</span>)<br>    email = db.Column(db.String(<span class="hljs-number">120</span>), unique=<span class="hljs-literal">True</span>, nullable=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;User %r&gt;&#x27;</span> % self.username<br></code></pre></td></tr></table></figure><p>上述程式碼定義了一個名為 User 的模型，包含三個屬性：id、name 和 email。</p><h2 id="建立資料庫表"><a href="#建立資料庫表" class="headerlink" title="建立資料庫表"></a>建立資料庫表</h2><p>在Flask-SQLAlchemy 中，可以使用以下程式碼建立資料庫表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.create_all()<br></code></pre></td></tr></table></figure><p>上述程式碼將根據模型定義建立資料庫表。</p><h2 id="添加資料到資料庫"><a href="#添加資料到資料庫" class="headerlink" title="添加資料到資料庫"></a>添加資料到資料庫</h2><p>在 Flask-SQLAlchemy 中，可以使用以下程式碼向資料庫添加資料：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">User</span>(name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;John Doe&#x27;</span>, email<span class="hljs-operator">=</span><span class="hljs-string">&#x27;johndoe@example.com&#x27;</span>)<br>db.session.add(<span class="hljs-keyword">user</span>)<br>db.session.commit()<br></code></pre></td></tr></table></figure><p>上述程式碼將建立一個新的 User 對象，將其添加到資料庫中，並提交更改。</p><h2 id="從資料庫檢索資料"><a href="#從資料庫檢索資料" class="headerlink" title="從資料庫檢索資料"></a>從資料庫檢索資料</h2><p>在 Flask-SQLAlchemy 中，可以使用以下程式碼從資料庫檢索資料：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">users <span class="hljs-operator">=</span> User.query.all()<br></code></pre></td></tr></table></figure><p>上述程式碼將檢索資料庫中的所有 User 對象，並將它們作為列表返回。</p><h2 id="更新資料庫中的資料"><a href="#更新資料庫中的資料" class="headerlink" title="更新資料庫中的資料"></a>更新資料庫中的資料</h2><p>在 Flask-SQLAlchemy 中，可以使用以下程式碼更新資料庫中的資料：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> User.query.filter_by(email<span class="hljs-operator">=</span><span class="hljs-string">&#x27;johndoe@example.com&#x27;</span>).<span class="hljs-keyword">first</span>()<br>user.name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;John&#x27;</span><br>db.session.commit()<br></code></pre></td></tr></table></figure><p>上述程式碼將從資料庫中檢索具有指定電子郵件地址的 User 對象，將其名稱更改為 John，然後提交更改。</p><h2 id="刪除資料庫中的資料"><a href="#刪除資料庫中的資料" class="headerlink" title="刪除資料庫中的資料"></a>刪除資料庫中的資料</h2><p>在 Flask-SQLAlchemy 中，可以使用以下程式碼從資料庫中刪除資料：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> User.query.filter_by(email<span class="hljs-operator">=</span><span class="hljs-string">&#x27;johndoe@example.com&#x27;</span>).<span class="hljs-keyword">first</span>()<br>db.session.delete(<span class="hljs-keyword">user</span>)<br>db.session.commit()<br></code></pre></td></tr></table></figure><p>上述程式碼將從資料庫中刪除具有指定電子郵件地址的 User 對象，然後提交更改。</p><h2 id="小節"><a href="#小節" class="headerlink" title="小節"></a>小節</h2><p>綜上所述，本篇教學文章介紹了 Flask-SQLAlchemy 的基本用法，包括建立 Flask 應用程式、設定資料庫、建立資料庫模型、建立資料庫表、添加資料到資料庫、從資料庫檢索資料、更新資料庫中的資料和刪除資料庫中的資料。這些步驟提供了初學者所需的基礎知識，可以用來構建簡單的 Python Flask 應用程式，以及進一步擴展以實現更複雜的資料庫操作。需要注意的是，Flask-SQLAlchemy 需要一定的學習曲線，但一旦掌握了基本概念，就可以輕鬆地使用它來管理資料庫。</p><p>希望本篇教學文章能夠為初學者提供一個良好的起點，幫助他們進入 Flask-SQLAlchemy 的世界，並開始在 Python Flask 應用程式中進行資料庫溝通。</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p>以下是本次回答所使用的參考資料的標題和連結：</p><ul><li><a href="https://flask-sqlalchemy.palletsprojects.com/en/3.0.x/quickstart/">Flask-SQLAlchemy 快速入門</a> 和 <a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/quickstart/">Flask-SQLAlchemy 快速入門</a>：兩篇 Flask-SQLAlchemy 的快速入門指南，介紹了 Flask-SQLAlchemy 的基本用法，是初學者快速入門 Flask-SQLAlchemy 的好資源。</li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-flask-sqlalchemy-to-interact-with-databases-in-a-flask-application">如何在 Flask 應用程式中使用 SQLAlchemy 進行資料庫 </a>：這篇教學透過一個小型的學生管理系統展示了如何使用 Flask-SQLAlchemy 擴展來完成基本的資料庫溝通，如連接到資料庫伺服器、建立資料庫表、添加資料、檢索資料、更新資料和刪除資料等操作。</li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-structure-a-large-flask-application-with-flask-blueprints-and-flask-sqlalchemy">如何使用 Flask Blueprints 和 Flask-SQLAlchemy 構建大型 Flask 應用程式的結構</a>：這篇教學詳細介紹了如何使用 Flask 藍圖和 Flask-SQLAlchemy 構建大型 Flask 應用程式的架構。本文提供了範例程式碼和詳細的解釋，是進階學習 Flask-SQLAlchemy 的好資源。</li><li><a href="https://flask-sqlalchemy.palletsprojects.com/">Flask-SQLAlchemy 文件</a>：Flask-SQLAlchemy 的官方文件，提供了完整的 API 參考、常見問題解答和高級主題等內容。無論你是初學者還是經驗豐富的 Python 開發者，都可以在這裡找到所需的資訊。</li><li><a href="https://pythonbasics.org/flask-sqlalchemy/">Flask SQLAlchemy (with Examples)</a>：這是一篇包含範例的教學，介紹了如何使用 Flask-SQLAlchemy 建立和操作資料庫表。本文包含了範例程式碼和詳細的解釋，是初學者快速掌握 Flask-SQLAlchemy 的好資源。</li><li><a href="https://towardsdatascience.com/building-a-crud-app-with-flask-and-sqlalchemy-1d082741bc2b">使用 Flask 和 SQLAlchemy 建立一個基本的 CRUD 應用程式</a>：這篇 </li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask 教學 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【 Flask 教學 】五分鐘學會 Flask 中的 GET, POST, PUT, PATCH, DELETE</title>
      <link href="/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/02-routes-26425c23607b/"/>
      <url>/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/02-routes-26425c23607b/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/python-flask/02/cover.jpeg"></p><p>本文詳細講解如何在 Flask 中使用 HTTP 請求方法，包括 GET、POST、PUT、PATCH 和 DELETE。文章介紹每種請求方法的用途和使用方法，並提供了相應的程式碼範例，使讀者能夠更好地理解如何在 Flask 中使用這些請求方法。本文適合初學者閱讀，可快速了解 Flask 中 HTTP 請求方法的基本使用方法。</p><h2 id="GET-請求"><a href="#GET-請求" class="headerlink" title="GET 請求"></a>GET 請求</h2><p>GET 請求用於從伺服器獲取資料。在 Flask 中，使用 GET 請求非常簡單。以下是一個簡單的範例，使用 GET 請求從伺服器獲取資料：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, jsonify<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/data&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span>():</span><br>    data = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>&#125;<br>    <span class="hljs-keyword">return</span> jsonify(data)<br></code></pre></td></tr></table></figure><p>在這個範例中，我們使用 Flask 的 <code>@app.route</code> 裝飾器來指定路由，其中 <code>methods=[&#39;GET&#39;]</code> 指定了使用 GET 請求。我們定義了一個 <code>get_data</code> 函數，返回一個包含 <code>name</code> 和 <code>age</code> 屬性的 JSON Response。</p><h2 id="POST-請求"><a href="#POST-請求" class="headerlink" title="POST 請求"></a>POST 請求</h2><p>POST 請求用於向伺服器提交資料。在 Flask 中，使用 POST 請求同樣非常簡單。以下是一個範例，使用 POST 請求提交表單資料：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/data&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post_data</span>():</span><br>    name = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>    age = request.form[<span class="hljs-string">&#x27;age&#x27;</span>]<br>    data = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: name, <span class="hljs-string">&#x27;age&#x27;</span>: age&#125;<br>    <span class="hljs-keyword">return</span> jsonify(data)<br></code></pre></td></tr></table></figure><p>在這個範例中，我們同樣使用 <code>@app.route</code> 裝飾器指定路由和請求方法。我們定義了一個 <code>post_data</code> 函數，使用 <code>request.form</code> 獲取提交的表單資料，然後將資料封裝成 JSON Response返回。</p><h2 id="PUT-請求"><a href="#PUT-請求" class="headerlink" title="PUT 請求"></a>PUT 請求</h2><p>PUT 請求用於更新伺服器上的資料。在 Flask 中，使用 PUT 請求也很簡單。以下是一個範例，使用 PUT 請求更新一條記錄：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><br>app = Flask(__name__)<br><br>data = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>&#125;<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/data/&lt;name&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;PUT&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">put_data</span>(<span class="hljs-params">name</span>):</span><br>    age = request.form[<span class="hljs-string">&#x27;age&#x27;</span>]<br>    data[name] = age<br>    <span class="hljs-keyword">return</span> jsonify(data)<br></code></pre></td></tr></table></figure><p>在這個範例中，我們使用了 URL 參數 <code>&lt;name&gt;</code> 來指定要更新的記錄。我們定義了一個 <code>put_data</code> 函數，使用 <code>request.form</code> 獲取新的年齡資料，並將資料更新到 <code>data</code> 字典中。</p><h2 id="PATCH-請求"><a href="#PATCH-請求" class="headerlink" title="PATCH 請求"></a>PATCH 請求</h2><p>PATCH 請求用於部分更新伺服器上的資料。在 Flask 中，使用 PATCH 請求同樣很簡單。以下是一個範例，使用 PATCH 請求部分更新一條記錄：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><br>app = Flask(__name__)<br><br>data = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>&#125;<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/data/&lt;name&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;PATCH&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">patch_data</span>(<span class="hljs-params">name</span>):</span><br>    age = request.form[<span class="hljs-string">&#x27;age&#x27;</span>]<br>    data[name][<span class="hljs-string">&#x27;age&#x27;</span>] = age<br>    <span class="hljs-keyword">return</span> jsonify(data)<br></code></pre></td></tr></table></figure><p>在這個範例中，我們同樣使用 URL 參數 <code>&lt;name&gt;</code> 來指定要更新的記錄。我們定義了一個 <code>patch_data</code> 函數，使用 <code>request.form</code> 獲取新的年齡資料，並將資料部分更新到 <code>data</code> 字典中。</p><h2 id="DELETE-請求"><a href="#DELETE-請求" class="headerlink" title="DELETE 請求"></a>DELETE 請求</h2><p>DELETE 請求用於刪除伺服器上的資料。在 Flask 中，使用 DELETE 請求同樣非常簡單。以下是一個範例，使用 DELETE 請求刪除一條記錄：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, jsonify<br><br>app = Flask(__name__)<br><br>data = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>&#125;<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/data/&lt;name&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;DELETE&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_data</span>(<span class="hljs-params">name</span>):</span><br>    <span class="hljs-keyword">del</span> data[name]<br>    <span class="hljs-keyword">return</span> jsonify(data)<br></code></pre></td></tr></table></figure><p>在這個範例中，我們同樣使用 URL 參數 <code>&lt;name&gt;</code> 來指定要刪除的記錄。我們定義了一個 <code>delete_data</code> 函數，使用 Python 的 <code>del</code> 語句從 <code>data</code> 字典中刪除指定的記錄，並將更新後的資料封裝成 JSON Response返回。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask 教學 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #2 學員心得 (2) 慶慶</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-02-qing-80fa8452d835/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-02-qing-80fa8452d835/</url>
      
        <content type="html"><![CDATA[<p>Q：名字<br>A：慶慶</p><p>Q：你在參加饅頭計畫前是否已經是工程師？<br>A：不，我不是工程師</p><p>Q：在饅頭計畫後你是否變成了一位工程師？<br>A：否，我沒有變轉職成功</p><p>Q：你目前的職業是？<br>A：都不是</p><p>Q：你覺得饅頭計畫對你有幫助嘛？(單選)<br>A：有幫助，掌聲鼓勵鼓勵</p><p>Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A：饅頭計畫是一個對於完全沒經驗的人來說非常棒的地方，有 Luka 帶領著我們，讓我們知道有什麼東西要學什麼東西可以不用急著學，對於自學來說會比較有方向性，因為我沒有轉職成功，但其中使用 Hackmd 紀錄筆記的習慣一直保持到現在，已經習慣把學習到的知識轉化成文字去複習。<br>你覺得 Luka 教學的過程最好的地方是什麼？<br>最好的地方就是 Luka 知道捷徑在哪裡，知道那些技能是現在市場最需要的以及知道哪些是 HR 想看的東西，對於要轉職的人來說非常有幫助，還有每周都會跟大家開直播聊聊天，會有種朋友在陪伴你而不是導師的感覺。<br>有沒有你很想學，但是沒有學到的東西？<br>我那時候很想學好 vue.js，但沒有 (跟老師無關 XD) 就放棄了。</p><p>Q：有沒有什麼話想對我說？<br>A：首先對 Luka 很抱歉，當初覺得自己轉職失敗很尷尬所以之前你請我寫的心得我就沒寫了，其實當初會放棄 100% 都是自己的原因，那時候的年底家裡有一些事情，生活壓力太大，頓時覺得自己沒什麼心再往前進，那時候負面到覺得我那麼認真想轉職讓生活變得更好，家裡的事情讓我情緒上變得很暴躁，所以最後選擇繼續在原本的工作躺平算了的想法一直出現就到了前陣子事情結束才比較好一點，其實我去年十一月開始有嘗試寫一些東西 XD 但老實說我還是不知道自己要不要轉職，所以想要嘗試寫 JAVA 跟 SQL 搭配之前學的前端搞個網站玩玩看，如果有機會再看能不能真的轉職到軟體工程的領域，因為畢竟我現在生活上經濟壓力比較大，工廠的收入比較扛的住 XD 我很怕轉職薪水差太多會扛不太住，總之很感恩你，謝謝 Luka</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #2 學員心得 (1) Phoebe</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-01-Phoebe-68f4b7bcdc7f/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-01-Phoebe-68f4b7bcdc7f/</url>
      
        <content type="html"><![CDATA[<p>Q：名字<br>A：Phoebe</p><p>Q：你在參加饅頭計畫前是否已經是工程師？<br>A：不，我不是工程師</p><p>Q：在饅頭計畫後你是否變成了一位工程師？<br>A：是，我成為了一個混水摸魚的工程師</p><p>Q：你目前的職業是？<br>A：前端</p><p>Q：你覺得饅頭計畫對你有幫助嘛？(單選)<br>A：非常有幫助，讚！</p><p>Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A：改變最大的是養成了學習時寫部落格的習慣。這個習慣不僅可以幫助到自己，也幫助到別人。強迫自己產出也是饅頭計畫的一部分，而 Luka 也會針對你寫的文章給你意見，並提出許多建議，十分的用心。</p><p>Q：你覺得 Luka 教學的過程最好的地方是什麼？<br>A：印象最深刻的是 Luka 有教大家如何提出「好」的問題。身為一個工程師，會問出好問題是非常重要的。那麼 Luka 也制定了許多規範，幫助大家問出更好的問題。<br>Luka 也制訂一些任務，讓大家去完成。那完成之後，也會根據你做出來的東西給予意見，這些回饋都非常的寶貴。因為在剛成為 Junior 時，都會有許多的盲點，這時候就需要一位 mentor 來引導。</p><p>Q：有沒有你很想學，但是沒有學到的東西？<br>A：TypeScript</p><p>Q：有沒有什麼話想對我說？<br>A：感謝 Luka 成立了饅頭計畫，給予當時還是學生的我許多的建議。讓我養成了良好的習慣，不管是在寫部落格，還是開發流程上，在饅頭計畫中都受益良多，讓我少走了一些彎路。期待饅頭計畫會越來越好！</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #2 學員心得 (3) Eva</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-03-eva-1c2d75ce85d1/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-03-eva-1c2d75ce85d1/</url>
      
        <content type="html"><![CDATA[<p>Q：名字<br>A：Eva</p><p>Q：你在參加饅頭計畫前是否已經是工程師？<br>A：不，我不是工程師</p><p>Q：在饅頭計畫後你是否變成了一位工程師？<br>A：是，我成為了一個人人稱羨的工程師</p><p>Q：你目前的職業是？<br>A：前端</p><p>Q：你覺得饅頭計畫對你有幫助嘛？(單選)<br>非常有幫助，讚！</p><p>Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A：1. 當時在 JS 上的學習卡關，透過課程給予 JS 觀念 以及大量實作，才開始建立起 JS 的觀念與實際運用的技巧，Q：也比較知道要如何持續精進JS以及甚至跨到框架的使用。2. 2. 在學習上比較有進度跟規劃，例如使用 github 所開任務或討論，可以依照自己的時間規劃每週應該達成的進度，或是也可以透過 github 上進行討論。</p><p>Q：你覺得 Luka 教學的過程最好的地方是什麼？<br>A：1. 給予快速掌握新技術的方式，例如：範例實作、資料查找方式、筆記技巧、提問方法。2. 對於積極學習的學員，只要不害怕提問 Luka 都會給予回饋，對剛起步的學員來說給予極大的鼓勵以及安全感。</p><p>Q：有沒有你很想學，但是沒有學到的東西？<br>A：1. 資料庫，在前公司偶爾會接觸後端工程師討論資料庫設計的部分，會希望可以理解，所以在會議中會稍微筆記，並學習資料庫的一些概念。2. 接下來學習方向就會依新工作需求或是未來發展方向進行，如 單元測試、react 等。 3. 後端的部分也會滿想學習，自己建立API 、資料庫並自己製作一個前後端專案（但此部分還不急）。</p><p>Q：有沒有什麼話想對我說？<br>A：很感謝 Luka 在自己工作後或轉換工作，有技術或方向問題的詢問都願意給予回覆。另外，若未來有需要協助的地方，時間允許下，我也樂意參與喔！</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #2 學員心得 (4) 鈺涵</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-04-yuha-9e37795672d3/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-04-yuha-9e37795672d3/</url>
      
        <content type="html"><![CDATA[<p>Q：名字<br>A：鈺涵</p><p>Q：你在參加饅頭計畫前是否已經是工程師？<br>A：不，我不是工程師</p><p>Q：在饅頭計畫後你是否變成了一位工程師？<br>A：否，因為人生選擇我沒有選擇成為工程師</p><p>Q：你目前的職業是？<br>A：仍然是設計師阿哈哈哈啊哈</p><p>Q：你覺得饅頭計畫對你有幫助嘛？(單選)<br>A：有幫助，掌聲鼓勵鼓勵</p><p>Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A：讓我了解工程師部分生態以及如何努力!<br>雖然基於種種理由最後沒有轉職成功=_=<br>但還是十分感謝饅頭哥的教誨XD</p><p>Q：你覺得 Luka 教學的過程最好的地方是什麼？<br>A：很好笑………….</p><p>Q：有沒有你很想學，但是沒有學到的東西？<br>A：因為中斷了所以這一題無解……….<br>你願意寫篇心得記錄饅頭計畫的過程嘛？<br>我願意！但我需要一點時間<br>有沒有什麼話想對我說？<br>謝謝你=  =下次回台灣我要請你吃飯XD</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #2 學員心得 (5) Michael</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-05-michael-1d20b6151954/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-05-michael-1d20b6151954/</url>
      
        <content type="html"><![CDATA[<p>Q：名字<br>A：Michael</p><p>Q：你在參加饅頭計畫前是否已經是工程師？<br>A：不，我不是工程師</p><p>Q：在饅頭計畫後你是否變成了一位工程師？<br>A：是，我成為了一個混水摸魚的工程師</p><p>Q：你目前的職業是？<br>A：前端</p><p>Q：你覺得饅頭計畫對你有幫助嘛？(單選)<br>A：非常有幫助，讚！</p><p>Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A：讓我面對難題時，能夠冷靜有邏輯地解決問題<br>你覺得 Luka 教學的過程最好的地方是什麼？<br>有條理地拆解問題，以及引導解決問題的方向</p><p>Q：有沒有你很想學，但是沒有學到的東西？<br>A：沒有</p><p>Q：有沒有什麼話想對我說？<br>A：很感謝你的教導！</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #2 學員心得 (6) Shawn</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-06-Shawn-cf17f806fc73/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-06-Shawn-cf17f806fc73/</url>
      
        <content type="html"><![CDATA[<p>Q：名字<br>A：Shawn</p><p>Q：你在參加饅頭計畫前是否已經是工程師？<br>A：不，我不是工程師</p><p>Q：在饅頭計畫後你是否變成了一位工程師？<br>A：是，我成為了一個混水摸魚的工程師</p><p>Q：你目前的職業是？<br>A：python相關工程師</p><p>Q：你覺得饅頭計畫對你有幫助嘛？(單選)<br>A：有幫助，掌聲鼓勵鼓勵</p><p>Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A：主要是學習方式,將學習的知識轉化為筆記並進一步建立成部落格，紀錄學習歷程，這點滿重要的，也因為學習筆記，對我進入現在公司有滿大的加分，至今也仍然使用此方式在學習.</p><p>Q：你覺得 Luka 教學的過程最好的地方是什麼？<br>A：陪伴你一路轉職，會幫你盯進度，雖然我屬於那種丟了履歷莫名找到工作的，但還是謝謝Luka前期的密集盯哨與陪伴！</p><p>Q：有沒有你很想學，但是沒有學到的東西？<br>A：目前還好</p><p>Q：有沒有什麼話想對我說？<br>A：謝謝Luka,覺得這樣的計劃非常有意義，也因為這個計畫認識了其他轉職夥伴，可以互相交流</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #2 學員心得 (7) Lily</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-07-lily-8f9d9709b463/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc2-07-lily-8f9d9709b463/</url>
      
        <content type="html"><![CDATA[<p>Q：名字<br>A：Lily</p><p>Q：你在參加饅頭計畫前是否已經是工程師？<br>A：是，我是工程師</p><p>Q：在饅頭計畫後你是否變成了一位工程師？<br>A：是，我成為了一個人人稱羨的工程師</p><p>Q：你目前的職業是？<br>A：前端</p><p>Q：你覺得饅頭計畫對你有幫助嘛？(單選)<br>A：非常有幫助，讚！</p><p>Q：如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A：感謝 Luka 的耐心協助，指點該如何準備面試，撰寫履歷（很多時候真的不理解到底該怎麼執行，Luka 可以在下班後那麼多事情的情況下願意幫忙，真的很感動），後來也順利拿到薪水更高的 offer。</p><p>Q：你覺得 Luka 教學的過程最好的地方是什麼？<br>A：很有耐心、會指點方向讓學員主動學習，而不是直接提供答案</p><p>Q：你覺得 Luka 教學的過程最好的地方是什麼？<br>A：pipeline 運作吧</p><p>Q：有沒有什麼話想對我說？<br>A：Hi 教練，新年快樂啊～</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【 Flask 教學 】Hello, Flask！五分鐘建立你的第一個 Flask 應用</title>
      <link href="/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/01-hello-flask-794c78ea073a/"/>
      <url>/Python/Flask-%E6%95%99%E5%AD%B8/python-flask/01-hello-flask-794c78ea073a/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/python-flask/01/cover.png"></p><h2 id="輕量型-Web-框架-Flask"><a href="#輕量型-Web-框架-Flask" class="headerlink" title="輕量型 Web 框架 - Flask"></a>輕量型 Web 框架 - Flask</h2><p><img src="/img/python-flask/01/2021-11-30-00-52-40.png"></p><p><a href="https://flask.palletsprojects.com/en/2.0.x/">Flask</a> 是一款 Python 的網頁開發框架。它的特色就是輕巧。Flask 的官方網站用 <a href="https://flask.palletsprojects.com/en/2.0.x/foreword/#what-does-micro-mean">Micro</a> 這個字來說明 Flask 的設計哲學。</p><p>Micro 意味著，一開始什麼都沒有，沒有資料庫，沒有好用的表單工具，Flask 就提供給你一個非常非常精簡的 Web 框架。</p><p>如果你需要資料庫功能，那麼你需要找尋套件，例如：你想要連接 MySQL 的話，需要安裝 Flask-SQLAlchemy 套件，來擴展你的 Flask 應用程式。</p><p>這跟 Python 中另一個主流框架，Django 大相逕庭。然而 Flask 與 Django 的市占率大概 50% vs 50%，非常有趣，意味著各有各的擁護者。</p><p>瞭解了 Flask 的設計哲學後，接下來我們實作的 Hello World 應用程式，便是只有提供網頁功能，並且只有「一個檔案」的迷你專案。</p><h2 id="Hello-Flask！"><a href="#Hello-Flask！" class="headerlink" title="Hello Flask！"></a>Hello Flask！</h2><p>初學程式的時候發現一個奇特的現象，為什麼第一個程式要輸出 <code>Hello World</code> 呢？因為我們第一件事情就是要確保環境能夠正確執行。</p><h3 id="安裝-Flask"><a href="#安裝-Flask" class="headerlink" title="安裝 Flask"></a>安裝 Flask</h3><p>使用 pip 安裝 Flask</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">pip install flask<br></code></pre></td></tr></table></figure><h3 id="組織專案結構"><a href="#組織專案結構" class="headerlink" title="組織專案結構"></a>組織專案結構</h3><p>安裝完成之後，我們先建立一個乾淨的資料夾命名為 hello_flask。<br>接著在裡面建立一個新檔案命名為 <code>hello.py</code><br>所以現在我們的專案結構是 hello_flask 資料夾底下，有一個 hello.py 的檔案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hello_flask<br>└── hello.py<br></code></pre></td></tr></table></figure><p>接著我們編輯 hello.py 的內容，將以下內容撰寫上檔案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_world</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(port=<span class="hljs-number">5000</span>)<br><br></code></pre></td></tr></table></figure><h3 id="在本地端運行"><a href="#在本地端運行" class="headerlink" title="在本地端運行"></a>在本地端運行</h3><p>接著下列指令，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> FLASK_APP=hello<br>flask run<br></code></pre></td></tr></table></figure><p>就會發現終端機的畫面，Flask Server (伺服器)已經開始在你的本地開發環境，也就是你的電腦上面運轉囉！</p><p><img src="/img/python-flask/01/2021-11-29-07-08-36.png"></p><p>此時我們複製終端機上的顯示的網址 <code>http://127.0.0.1:5000/</code> 到瀏覽器上，打開便會看到 Hello World！。</p><p><img src="/img/python-flask/01/2021-11-30-01-35-56.png"></p><p>先讓程式跑起來，接下來我們才可以嘗試各式各樣的開發。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://flask.palletsprojects.com/en/2.0.x/">Flask 官方網站</a></li><li><a href="https://www.maxlist.xyz/2020/04/30/flask-helloworld/">實作一個簡單的 Flask 入門 | Max行銷誌</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask 教學 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【 Python 冷知識 】你知道 PyPI 怎麼唸嘛？</title>
      <link href="/Python/%E5%9F%BA%E7%A4%8E%E6%95%99%E5%AD%B8/python/03-how-to-pronounce-pypi-4a9321660029/"/>
      <url>/Python/%E5%9F%BA%E7%A4%8E%E6%95%99%E5%AD%B8/python/03-how-to-pronounce-pypi-4a9321660029/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/python/03/cover.png"></p><p>撰寫另一篇文章 <a href="/2021/11/27/python/02-what-is-pypi/">【 Python 教學 】什麼是 PyPI？跟 pip 又有什麼關係呢？</a>的時候，發現 PyPI 的時候，產生了一個疑問，PyPI該怎麼唸？</p><p>可能的答案有：</p><ol><li>拍拍</li><li>批歪批唉</li><li>批批</li><li>拍批埃</li></ol><p>究竟是哪一個，你念對了嘛？答案在下方教學影片：</p><p><a href="https://www.youtube.com/watch?v=I5OUzCAYst8">How to pronounce PyPI (beginner) Anthony explains #020 - YouTube</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 基礎教學 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【 Python 教學 】什麼是 PyPI？跟 pip 又有什麼關係呢？</title>
      <link href="/Python/%E5%9F%BA%E7%A4%8E%E6%95%99%E5%AD%B8/python/02-what-is-pypi-fc0b4fc6ba6b/"/>
      <url>/Python/%E5%9F%BA%E7%A4%8E%E6%95%99%E5%AD%B8/python/02-what-is-pypi-fc0b4fc6ba6b/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-PyPI？"><a href="#什麼是-PyPI？" class="headerlink" title="什麼是 PyPI？"></a>什麼是 PyPI？</h2><p><img src="/img/python/02/cover.png"></p><p>PyPI（英語 Package Index，簡稱PyPI），是 的官方的第三方套件儲存庫。</p><p><img src="/img/python/02/2021-11-28-05-00-54.png"></p><p>如果用生活的例子來比喻，就像 Android 手機，有 google play 可以安裝軟體。iphone 有 app store 來安裝軟體。在這之中 PyPI 就像是 google play 或是 app store.</p><p>在我們使用 pip 安裝套件的時候，下指令 <code>pip install 套件名稱</code> 預設就是從 PyPI 下載套件。</p><h2 id="在-PyPI-上搜尋套件"><a href="#在-PyPI-上搜尋套件" class="headerlink" title="在 PyPI 上搜尋套件"></a>在 PyPI 上搜尋套件</h2><p><a href="https://pypi.org/">官方網站</a></p><p><img src="/img/python/02/2021-11-28-05-00-25.png"></p><p>我們試著搜尋 web 框架 flask 。看到第一個就是搜尋結果，後方的日期是更新的時間。</p><p><img src="/img/python/02/20211128040736.png"></p><p>點擊進去之後，就可以看到 Flask 的介紹，還有貼心的教學， 在指令列輸入 <code>pip install flask</code> 即可安裝。</p><p><img src="/img/python/02/20211128040929.png"></p><h2 id="在-PyPI-上查看簡易介紹"><a href="#在-PyPI-上查看簡易介紹" class="headerlink" title="在 PyPI 上查看簡易介紹"></a>在 PyPI 上查看簡易介紹</h2><p>下方還有簡單的範例，不過因為這些套件是第三方 (Third-Party) 維護，也就是開發套件的人是自主開發的，因此我們需要到各自的官網看詳細教學。</p><p><img src="/img/python/02/20211128041134.png"></p><h2 id="在-PyPI-找到套件的官方網站，查看詳細文件"><a href="#在-PyPI-找到套件的官方網站，查看詳細文件" class="headerlink" title="在 PyPI 找到套件的官方網站，查看詳細文件"></a>在 PyPI 找到套件的官方網站，查看詳細文件</h2><p>所以我們點擊 documentation</p><p><img src="/img/python/02/20211128041405.png"></p><p>就可以進入到 <a href="https://flask.palletsprojects.com/">Flask 的官方網站</a>，最詳盡的文件可以在這邊找到。</p><p><img src="/img/python/02/20211128041528.png"></p><h2 id="PyPI-跟-pip-有什麼關係呢？"><a href="#PyPI-跟-pip-有什麼關係呢？" class="headerlink" title="PyPI 跟 pip 有什麼關係呢？"></a>PyPI 跟 pip 有什麼關係呢？</h2><p>最後我們來回答標題上的第二個問題，PyPI 跟 pip 的關係，剛剛在操作過程已經知道了。<code>pip install 某某套件</code> 預設的官方套件商店就是 PyPI。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>今天介紹的是從 PyPI 官方網站搜尋到需要的套件 (Flask)，然後使用指令安裝需要的套件，最後是如何查詢 Flask 的使用方式。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 基礎教學 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【 Python 資料科學 】書籍推薦</title>
      <link href="/Python/%E5%9F%BA%E7%A4%8E%E6%95%99%E5%AD%B8/python/01-data-science-book-69b437eb43dc/"/>
      <url>/Python/%E5%9F%BA%E7%A4%8E%E6%95%99%E5%AD%B8/python/01-data-science-book-69b437eb43dc/</url>
      
        <content type="html"><![CDATA[<h3 id="Data-Science-from-Scratch-中文版（第二版）：用-Python-學資料科學"><a href="#Data-Science-from-Scratch-中文版（第二版）：用-Python-學資料科學" class="headerlink" title="Data Science from Scratch 中文版（第二版）：用 Python 學資料科學"></a>Data Science from Scratch 中文版（第二版）：用 Python 學資料科學</h3><p><img src="/img/python/01/2021-11-25-07-53-06.png"></p><p>這本裡面有大量的名詞幫，適合當工具書來查詢，硬啃的話有點累。名詞如下：</p><p>資料視覺化, 線性代數, 統計學, 機率, 假設與推論, 梯度遞減, 取得資料, 處理資料, 機器學習, k最近鄰, 單純貝氏, 簡單線性迴歸, 多元迴歸, 邏輯迴歸, 決策樹, 神經網路, 深度學習, 集群, 自然語言處理, 網路分析, 推薦系統, 資料庫與SQL, MapReduce</p><h3 id="Python資料分析-第二版"><a href="#Python資料分析-第二版" class="headerlink" title="Python資料分析 第二版"></a>Python資料分析 第二版</h3><p><img src="/img/python/01/2021-11-25-07-53-46.png"></p><p>這本是 pandas 的作者寫的書，本書重點在於使用 pandas 與 NumPy 進行資料載入、資料前處理、資料處理、資料視覺化 … 等等的步驟。如果想要學習完整的流程挺推薦。</p><h3 id="Python資料科學學習手冊"><a href="#Python資料科學學習手冊" class="headerlink" title="Python資料科學學習手冊"></a>Python資料科學學習手冊</h3><p><img src="/img/python/01/2021-11-26-06-11-45.png"></p><p>本書分為五個章節，從資料科學開始介紹，接著介紹常用的 IPython、NumPy、Pandas 資料處理、Matplotlib 資料視覺化、最後介紹 Sckit-Learn 來學習機器學習。非常完整的介紹資料科學的流程。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://www.pttcc.org/bbs/Book/M.1587341470.A.A26">[分享] 2020 推薦 Python資料科學的書</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 基礎教學 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (1) Joanne</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-01-joanne-dcf2ae1c18be/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-01-joanne-dcf2ae1c18be/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: Joanne</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 是，我成為了一個混水摸魚的工程師</p><p>Q: 你目前的職業是？<br>A: 全端，但專案框架都雷同</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 有幫助，掌聲鼓勵鼓勵</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A: 還記得加入饅頭計畫沒多久，同時也在準備實習面試(目前已畢業轉正)，當時的我coding能力其實並不好，許多基本觀念、技術也都很不熟悉，所以對於即將開始實習這件事，感到非常緊張和擔心，擔心自己能力不足也擔心自己沒辦法好好表現，所以也曾經請教過Luka，該如何提升自己的能力呢 ? 甚至到底該如何學習「物件導向」? 而請教完也相對比較有概念，知道如果要把「物件導向」的相關書籍從頭啃到尾，實在有點痛苦，做中學才能真正理解何謂物件導向。而其實也相當感謝Luka願意無私的分享自己的技術，講解了許多基本觀念和分享開發過程中會接觸到的工具，你的課程很棒~真的有幫助到我~~~ XD 即使在後期因為工作繁忙比較少參與課程，但還是非常謝謝Luka  ʕ•ᴥ•ʔ</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 覺得Luka做事很積極哈哈哈，非常的棒啊啊啊啊，當我準備怠惰時，看到Luka下班後還開直播教學，立馬從沙發跳起 (沒資格軟爛)。hahaha</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A:</p><ol><li>資料庫正規化設計及資料庫效能優化 很需要加強…</li><li>AWS (工作上有接觸到一些，已購入課程，目標今年考到證照!!!)</li><li>Ruby、Ruby On Rails</li><li>網路架構這塊…超弱 QQ 什麼封包什麼router switch，因為我是IT部門，這塊早晚還是必須學起來</li><li>強大的邏輯，有了清晰又強大的邏輯力，遇到問題就可以馬上知道問題點及解決方法 <em>(:::з」∠)</em></li></ol><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 我願意！但我需要一點時間</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 非常期待饅頭計畫第二彈 ! Luka加油~!</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 有興趣</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (2) GK</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-02-gk-dbb820c8db1e/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-02-gk-dbb820c8db1e/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: GK</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 是，我成為了一個混水摸魚的工程師</p><p>Q: 你目前的職業是？<br>A: 前端工程師</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 非常有幫助，讚！</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A: 不好意思說自己是人人稱羨的工程師，只好自稱混水摸魚，但其實還是稍微認真的在工作著，也逐漸朝系統分析的領域、後端領域與資料庫的領域學習。我覺得最大的好處就是有人督促學習，監督進度，不然自己真的很容易懶散。感謝 Luka！</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 逼迫的部分</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: 沒有特別想學什麼，都是順著路走</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 我願意！但我需要一點時間</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 我寫了一篇轉職心得，其中有提到一點點饅頭計畫<a href="https://gkfat.github.io/gk-blog/2019/10/15/road-to-front-end">https://gkfat.github.io/gk-blog/2019/10/15/road-to-front-end</a></p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 有興趣</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (3) Genie</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-03-genie-1cc488e84291/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-03-genie-1cc488e84291/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: Genie</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 否，我沒有變轉職成功</p><p>Q: 你目前的職業是？<br>A: 還在學習中，目標今年轉職成功</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 還好，so so</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A: 暫無。</p><p>不過主要是我自己的原因啦，的確沒有花太多的時間與精力在饅頭計畫上，也沒有與 Luka 保持聯繫，討論學習中所遇到的狀況與進度。</p><p>如果有機會再參加一次的話，應該會嘗試有沒有其他作法，把時間管理以及與進度追蹤做好，以這樣的狀態來參加饅頭計畫應該比較有意義</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 沒有將每支影片都看完，不過Luka的教學架構做的很具體，所以透過影片的標題的關鍵字，可以知道要成為網站工程師需要了解以及學習的技能有哪些;<br>然後就是 Luka 是個很願意分享的人，剛開始有 slack 私訊以及發 PR 說明自己目前的學習狀況，Luka 會認真地分析以及指出要怎麼加強，在自學的路上有個有經驗的人可以指引方向很重要</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: 想知道後端方面所需要學習的知識與技能，以及如何與前端配合</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 我願意！但我需要一點時間</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 參與 Luka 饅頭計畫後，覺得 Luka 是個用很用心的態度在做事的 mentor，這個計劃的發心以及構想很不錯，而且真的有人透過饅頭計畫轉職成功，其實蠻替這些人感到高興的，另一方面透過這次的經驗，發現自己在學習上屬於較被動型的，有些學習的策略是需要調整的，教練，我好想變強啊。</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 有興趣</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (4) TsungYu</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-04-tsung-yu-49c0edcf11b9/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-04-tsung-yu-49c0edcf11b9/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: 宗裕</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 是，我成為了一個混水摸魚的工程師</p><p>Q: 你目前的職業是？<br>A: 偏向雲端工程師</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 有幫助，掌聲鼓勵鼓勵</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可</p><p>A: 我覺得這個計畫對我最大的影響是讓我在學習的過程中，學會自己去找問題解答，有幾次因為 Mentor 的提點，才有辦法找出解法。過程雖然挫折，但我相信這是成為一位 Engineer 必須具備的能力，畢竟很多時候，不可能會有人手把手帶著自己(別人也沒有義務)。</p><p>另外覺得很不錯的地方在於 Mentor 鼓勵學員將自己的學習記錄成文章，在撰寫的過程中，其實也是在檢視自己對於該技術的認知程度到多少。而更多時候是，記錄下來的東西是幫助到未來的自己！經常在 Coding 時會回過頭來看筆記，每次看著看著，就會想哪裏沒寫好，或是還有哪些可以補充，我想這也是一種成長。</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: Luka 的引導方式有別於一般Mentor，遇到問題的時候，不會急著給答案，而是給解決問題的方向，要學員嘗試自己去找解法，讓學員養成試著自己除錯的習慣。</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: 後端工程師的一些必備知識，e.g. 網路、資料庫、資安等等</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 我願意！但我需要一點時間</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 謝謝 Luka! 若不是饅頭計畫，我可能沒辦法即時修正自己的學習方法，從發散式的學習到收斂至主要目標，切分成一個個的學習步驟。</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 我才不要勒</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (5) Leah</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-05-leah-67bba6e68e7d/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-05-leah-67bba6e68e7d/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: Leah</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 是，我成為了一個混水摸魚的工程師</p><p>Q: 你目前的職業是？<br>A: 前端</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 非常有幫助，讚！</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A:<br>初期找工作時明確知道準備方向，也因為有Luka開Asana的票，隨時盯自己的進度，比較不會自己一個人準備就沒自信、鬆懈。<br>之後跟其他學院加入群組，還有一次實體分享會，在裡面看到其他人的分享，也督促自己成為工程師之後還是要持續進修</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 願意分享經驗，提供明確的建議，很大方提供Udemy讓我當免費仔XD</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: Docket k8s 這些新潮的雲端部署的概念</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 我願意！而且我已經寫好了</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 在年初的激勵之下，拖了半年，我終於勇敢換工作了！換到一家比較有成長性的公司，不過是還沒滿試用期的菜雞</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 有興趣</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (6) Shirley</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-06-shirley-bdec4cd6b780/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-06-shirley-bdec4cd6b780/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: shirley</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 否，我沒有變轉職成功</p><p>Q: 你目前的職業是？<br>A: UI設計師，會接觸到一些切版</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 有幫助，掌聲鼓勵鼓勵</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A: 因課程教學不到一半，自己先去找到工作了</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 暸解到前端，基本學習</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: 目前沒有</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 抱歉，這題我 pass</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 謝謝你，給我們學習的機會，讓我們收穫很多。辛苦你，準備很多題材～ 你題材很棒</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 我才不要勒</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (7) Theo</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-07-theo-6d533979e6e4/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-07-theo-6d533979e6e4/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: Theo</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 是，我成為了一個混水摸魚的工程師</p><p>Q: 你目前的職業是？<br>A: backend</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 有幫助，掌聲鼓勵鼓勵</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A:<br>老實說，我大多是請教Luka 關於履歷問題、面試問題應對，還有工作狀況、職涯問題XD，尤其是找工作時期有 Luka指點履歷和面試問題，糾正許多自己沒有注意到的缺點，還有比較不容易迷失求職方向，最後是剛入職時期，由於公司沒有前輩可以讓我詢問，所以都是透過 Luka 的熱心答覆，慢慢釐清自己在工作上的定位，以及職場上的心境轉換</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 熱心答覆問題，雖然偶爾話題不斷加開</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: 系統分析的流程和技巧</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 我願意！但我沒有時間</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 我是 Starbugs 忠實讀者，luka 分享的文章都有乖乖看</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 有興趣</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (8) Windy</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-08-windy-498c4966f4bb/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-08-windy-498c4966f4bb/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: windy</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 是，我是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 是，我成為了一個混水摸魚的工程師</p><p>Q: 你目前的職業是？<br>A: 前端</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 有幫助，掌聲鼓勵鼓勵</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A: 觀念上有幫助</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 教學的方法 是適合我的</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: 目前的觀念還是很弱 我應該還是會主要在繼續把觀念搞好</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 抱歉，這題我 pass</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 謝謝你願意花時間， 幫助想轉職或者觀念不好的人</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 我才不要勒</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (9) Phoenix</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-09-phoenix-3207470f2d7e/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-09-phoenix-3207470f2d7e/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: Phoenix</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 是，我成為了一個混水摸魚的工程師</p><p>Q: 你目前的職業是？<br>A: 後端，前端碰的較少</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 非常有幫助，讚！</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A: 我找到工作了</p><p>雖然我是離開工程師一年後再踏上工程師的路，當時的確忘了很多基本觀念，加上前一份工程師的工作使用較舊的技術，經過這次饅頭計畫，創照這樣的環境，跟著大家一起努力，一起成長。</p><p>過程中除了技術的成長外，也會在過程中給予我們工程師該有的知識與養成的一些習慣</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 耐心教學，很願意教我們這點已經夠讓人敬佩了</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: 其實前後端知識都蠻有興趣的，想要一條往 senior 路上必備的知識<br>想把前端弄好一個框架，react 或 vue 都好<br>後端太博大精深了，有點不知道從何學起，或只能遇到問題在去學習了</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 我願意！但我需要一點時間</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 很謝謝你在我當時迷茫低潮害怕的時候給予勇氣，勇敢踏出那一步<br>不知道之後會不會有前進senior之路的教學</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 有興趣</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (10) 昱穎</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-10-yu-ying-7af091164f2b/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-10-yu-ying-7af091164f2b/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: 昱穎</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 否，我沒有變轉職成功</p><p>Q: 你目前的職業是？<br>A: 都不是，在學前端</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 有幫助，掌聲鼓勵鼓勵</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A: 我應該不算有參加到饅頭計畫XD，但我有認真看完yt的影片。yt影片錄得很生動，也重新學到很多。</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 願意很友善的這樣對陌生人XD，還有另一點是影片是從網路的教學資源去講解，讓人有資料可以跟著看，不是那種開一個畫面就開始介紹打code那種教學影片</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: 什麼都想</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 我願意！但我需要一點時間</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 哈哈，我前幾天有跟你打招呼，不過感覺你很忙就沒打擾你了！總之很謝謝你願意跟陌生人說說話還有鼓勵，我還是會繼續學寫程式的ＸＤ。對於上面的問題我應該是還沒辦法當助教，但我想繼續參與。總之很謝謝你～！</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 有興趣</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (11) Trista</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-11-trista-28b87a9b0013/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-11-trista-28b87a9b0013/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: 唯</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 是，我成為了一個混水摸魚的工程師</p><p>Q: 你目前的職業是？<br>A: 前端</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 有幫助，掌聲鼓勵鼓勵</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A: 我目前找到一份薪水還可以的工作，月薪四萬，重點是，我終於可以不再只是設計師，而是能透過ＪＳ控制元件的人了＾Ｏ＾（超開心）<br>饅頭計畫中我覺得收穫最大的是自信吧，每次聚會聽跟看大家不同的想法，還有自我檢討（雖然為了賺錢沒很積極讀書），但是至少我得到了許多啟發。</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 資源，看到了很多人分享的想法，對我來說就是最大的資源。<br>而 Luka 也給了我許多不同的觀點，這也影響到我現在對小孩學習上的投資（是個媽媽）。</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: 串接ＡＰＩ跟資料庫之類的（其實我現在做的工作就是串ＪＳＯＮ跟寫動態資料，但我不知道這叫不叫ＡＰＩ），或是前端框架大綱（發現好多公司都要會用框架的人，我目前的工作還不需要）</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 我願意！但我需要一點時間</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 很感謝您，在我人生低谷的時候遞出了橄欖枝。</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 有興趣</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (12) Celine</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-12-celine-d815364ffd90/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-12-celine-d815364ffd90/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: Celine</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 否，我沒有變轉職成功</p><p>Q: 你目前的職業是？<br>A: 前端</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 有幫助，掌聲鼓勵鼓勵</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A: 用 HackMD 做筆記、寫部落格、參加相關領域社群的習慣。</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 比起外面、自己找的課程，大多是針對轉職所擬定的，但饅頭計畫是由一個真的在業的真人所引導，感覺對工程師的工作有更親近、踏實的銜接。</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: React</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 我願意！而且我已經寫好了</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 哈囉 Luka 好久不見！上次在台北的聚會沒辦法跟到真可惜，希望之後還能有機會～（歡迎來台南呀！）<br>想說的事情我用條列式好了。</p><p>1. 我最近忙著一個計畫（還有製作 Podcast ），耽擱了我找工作的時間，我的作品剩下購物網站（大概進度50%），因為計畫的關係預計延後到 10 月找工作，不過我還蠻有信心的，也覺得自己學得扎實，有想要利用空閒時間更深入地探究 React（雖然真的很忙）。<br>2. 文章我在我的 Medium 上面，那篇講述轉職的文章有一個段落在提饅頭計畫，我覺得饅頭計畫是有機體（？），所以不只把它囿於只有當初在轉職時的一部分學習，之後有工作了，還是會覺得是饅頭計畫的一份子，也會想知道 Luka 和其他成員不管有沒有轉職成功，在各自領域的後續狀況、或許將來有機會參與彼此以及討論。<br>3. 如果是第二彈饅頭計畫，我覺得工作變強好像是不錯的路線喔！現在雜七雜八的轉職入門課太多了，好像很多人沒有想過就想說先來學程式好了。不過不管是哪種，有需要的話我都樂意擔任助教:)<br>4. 希望可以保持聯絡，找到工作之後再通知你～</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 有興趣</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (13) Sherry</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-13-sherry-d36ae9f3dd4c/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-13-sherry-d36ae9f3dd4c/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: Sherry</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 是，我成為了一個混水摸魚的工程師</p><p>Q: 你目前的職業是？<br>A: 寫 Vue 的前端工程師</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 有幫助，掌聲鼓勵鼓勵</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A: 在於找工作前的那段衝刺期，除了有Luka老師的提點外，其他找到工作的學員也都很樂於分享。每週定定的計劃讓自己的進步更有明確的方向。</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 溝通語言簡單，邊講也會邊給其他建議</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: 一些工作上的實務觀念和可能面臨的問題與學習歷程</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 我願意！但我需要一點時間</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 謝謝老師，請老師也繼續加油！</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 有興趣</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (14) Orow</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-14-orow-fa6632c1cdbc/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-14-orow-fa6632c1cdbc/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: Orow</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 是，我成為了一個人人稱羨的工程師</p><p>Q: 你目前的職業是？<br>A: 前端</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 有幫助，掌聲鼓勵鼓勵</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A: 從無到有開始學習前端，知道怎麼樣開始找資源學習，工作實務上遇到的狀況也可以持續跟mentor討論互相了解</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 依照每個人狀況不同在調整學習曲線</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: 前端各種框架、docker、測試…等等</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 我願意！但我需要一點時間</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 饅頭計畫很棒！</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 有興趣</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #1 學員心得 (15) Old Mo</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-15-old-mo-3e9bbd0820d2/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc1-15-old-mo-3e9bbd0820d2/</url>
      
        <content type="html"><![CDATA[<p>Q: 怎麼稱呼？<br>A: 老莫</p><p>Q: 你在參加饅頭計畫前是否已經是工程師？<br>A: 不，我不是工程師</p><p>Q: 在饅頭計畫後你是否變成了一位工程師？<br>A: 是，我成為了一個混水摸魚的工程師</p><p>Q: 你目前的職業是？<br>A: 前端為主，偶爾碰後端</p><p>Q: 你覺得饅頭計畫對你有幫助嘛？<br>A: 有幫助，掌聲鼓勵鼓勵</p><p>Q: 如果有幫助的話，請說說饅頭計畫帶給你的改變，如果對你的改變很大，請盡可能詳述，反之，填無即可<br>A: 我沒有全程參與計畫，但我有問題就會問你，覺得在職涯能認識資深工程師還願意解惑是很好的事</p><p>Q: 你覺得 Luka 教學的過程最好的地方是什麼？<br>A: 精準回答問題</p><p>Q: 有沒有你很想學，但是沒有學到的東西？<br>A: 後端進階應用</p><p>Q: 你願意寫篇文章記錄饅頭計畫的過程嘛？<br>A: 我願意！但我沒有時間</p><p>Q: 有沒有什麼話想對 Luka 說？<br>A: 你好帥</p><p>Q: 如果有饅頭計畫第二彈，你願意擔任助教嘛？<br>A: 有興趣</p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>饅頭計畫 #0 學員心得 (1) Moojing</title>
      <link href="/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc0-01-moojing-ae7b693b7600/"/>
      <url>/%E9%A5%85%E9%A0%AD%E8%A8%88%E7%95%AB/%E5%AD%B8%E5%93%A1%E5%BF%83%E5%BE%97/mc0-01-moojing-ae7b693b7600/</url>
      
        <content type="html"><![CDATA[<p>第零屆的學員只有一個人，這位同學寫了系列文章文章記錄了學習軌跡。</p><p><a href="https://moojing.medium.com/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BE%8C%E7%AB%AF%E4%B9%8B%E6%97%85-%E5%BA%8F-%E5%8E%9F%E4%BE%8630%E5%A4%A9%E5%8F%AF%E4%BB%A5%E8%B5%B0%E9%80%99%E9%BA%BC%E9%81%A0-8317eb3eb8c8">前端工程師後端之旅(1) — 原來30天可以走這麼遠. 一個月可以做很多事：可以讀一本書、可以出國旅遊、可以養成一個你想要的好習慣，我用… | by Moojing | Medium</a><br><a href="https://medium.com/@moojing/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BE%8C%E7%AB%AF%E4%B9%8B%E6%97%85-1-%E5%BE%9E%E7%95%AB%E9%9D%A2%E6%8B%86%E8%A7%A3-%E5%88%B0%E6%95%B4%E7%90%86user-story-4a4cd790fdfc">前端工程師後端之旅(2) — 從畫面拆解，到整理User Story</a><br><a href="https://medium.com/@moojing/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BE%8C%E7%AB%AF%E4%B9%8B%E6%97%85-2-%E8%B7%AF%E7%94%B1%E8%A8%AD%E8%A8%88%E4%BB%A5%E5%8F%8Aslug-seo%E5%84%AA%E5%8C%96-16af6693a062">前端工程師後端之旅(3) — 路由設計以及Slug SEO優化</a><br><a href="https://medium.com/@moojing/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BE%8C%E7%AB%AF%E4%B9%8B%E6%97%85-3-%E5%89%8D%E7%AB%AF%E9%AB%94%E9%A9%97%E5%84%AA%E5%8C%96-a2df5675dedd">前端工程師後端之旅(4) — 前端體驗優化</a><br><a href="https://medium.com/@moojing/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BE%8C%E7%AB%AF%E4%B9%8B%E6%97%85-4-%E8%B3%87%E6%96%99%E5%BA%AB%E9%97%9C%E4%BF%82%E8%A8%AD%E8%A8%88-76dc83170950">前端工程師後端之旅(5) — 資料庫關係設計</a><br><a href="https://medium.com/@moojing/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BE%8C%E7%AB%AF%E4%B9%8B%E6%97%85-5-%E5%88%A9%E7%94%A8%E7%88%AC%E8%9F%B2%E5%8F%96%E5%BE%97%E7%B6%B2%E7%AB%99%E5%8E%9F%E5%A7%8B%E5%95%86%E5%93%81%E8%B3%87%E6%96%99-e3a0105b8930">前端工程師後端之旅(6) — 利用爬蟲取得網站原始商品資料</a><br><a href="https://medium.com/@moojing/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BE%8C%E7%AB%AF%E4%B9%8B%E6%97%85-6-%E7%9B%B4%E4%B8%8A%E7%A9%B9%E9%A0%82%E7%9A%84%E6%9C%80%E5%BE%8C%E4%B8%80%E5%93%A9%E8%B7%AF-%E9%83%A8%E7%BD%B2-b13675f13814">前端工程師後端之旅(7) — 直上穹頂的最後一哩路：部署</a><br><a href="https://medium.com/@moojing/javascript-%E8%A3%BD%E4%BD%9C-base-on-cookie-%E7%9A%84%E8%B3%BC%E7%89%A9%E8%BB%8A-8bf9bc0a55e1">[Javascript] 製作 Base on Cookie 的購物車</a><br><a href="https://medium.com/@moojing/javascript-%E5%88%9D%E6%8E%A2regex-%E6%AD%A3%E8%A6%8F%E8%A1%A8%E9%81%94%E5%BC%8F-1da2f4d94795">[Javascript] 初探Regex 正規表達式</a><br><a href="https://medium.com/@moojing/javasrcipt-summernote-%E6%89%80%E8%A6%8B%E5%8D%B3%E6%89%80%E5%BE%97%E7%B7%A8%E8%BC%AF%E5%99%A8%E9%81%94%E6%88%90%E5%9C%96%E7%89%87%E4%B8%8A%E5%82%B3-7ce3cebcb592">[javasrcipt] Summernote 所見即所得編輯器達成圖片上傳</a></p>]]></content>
      
      
      <categories>
          
          <category> 饅頭計畫 </category>
          
          <category> 學員心得 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
